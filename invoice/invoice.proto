syntax = "proto3";

package invoice;

option go_package = "invoicepb";
option java_multiple_files = true;
option java_outer_classname = "InvoiceProto";
option java_package = "com.invoice";

import "common/document_common.proto";
import "google/protobuf/timestamp.proto";
import "precise-proofs/proofs/proto/proof.proto";

// InvoiceData is the default invoice schema
message InvoiceData {
  // invoice number or reference number
  string number = 1;
  // invoice status
  string status = 2 [(proofs.field_length) = 32];
  string sender_invoice_id = 3;
  string recipient_invoice_id = 4;
  string sender_company_name = 5;
  string sender_contact_person_name = 6;
  string sender_street1 = 7;
  string sender_street2 = 8;
  string sender_city = 9;
  string sender_zipcode = 10;
  string sender_state = 11;
  string sender_country = 12;
  string bill_to_company_name = 43;
  string bill_to_contact_person_name = 44;
  string bill_to_street1 = 15;
  string bill_to_street2 = 16;
  string bill_to_city = 17;
  string bill_to_zipcode = 18;
  string bill_to_state = 50;
  string bill_to_country = 20;
  string bill_to_vat_number = 21;
  string bill_to_local_tax_id = 60;
  string remit_to_company_name = 23;
  string remit_to_contact_person_name = 24;
  string remit_to_street1 = 25;
  string remit_to_street2 = 26;
  string remit_to_city = 27;
  string remit_to_zipcode = 28;
  string remit_to_state = 30;
  string remit_to_country = 31;
  string remit_to_vat_number = 32;
  string remit_to_local_tax_id = 33;
  string remit_to_tax_country = 34;
  string ship_to_company_name = 35;
  string ship_to_contact_person_name = 36;
  string ship_to_street1 = 37;
  string ship_to_street2 = 38;
  string ship_to_city = 39;
  string ship_to_zipcode = 40;
  string ship_to_state = 41;
  string ship_to_country = 42;
  string currency = 13;
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes gross_amount = 14 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes net_amount = 45 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_amount = 46 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_rate = 47 [(proofs.field_length) = 32];
  bool tax_on_line_level = 48;
  // centrifuge ID of the recipient
  bytes recipient = 49 [(proofs.field_length) = 20];
  // centrifuge ID of the sender
  bytes sender = 19 [(proofs.field_length) = 20];
  // centrifuge ID of the payee
  bytes payee = 51 [(proofs.field_length) = 20];
  string comment = 52;
  string shipping_terms = 53;
  string requester_email = 54;
  string requester_name = 55;
  //number of the delivery note
  string delivery_number = 56;
  bool is_credit_note = 57;
  string credit_note_invoice_number = 58;
  google.protobuf.Timestamp credit_for_invoice_date = 59;
  google.protobuf.Timestamp date_due = 22;
  google.protobuf.Timestamp date_paid = 61;
  google.protobuf.Timestamp date_updated = 62;
  google.protobuf.Timestamp date_created = 63;
  repeated common.BinaryAttachment attachments = 64;
  repeated LineItem line_items = 65;
  repeated common.PaymentDetails payment_details = 66;
  repeated TaxItem tax_items = 67;
}

message TaxItem {
  string item_number = 1;
  string invoice_item_number = 2;
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_amount = 3 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_rate = 4 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_code = 5 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_base_amount = 6 [(proofs.field_length) = 32];
}

message LineItem {
  string item_number = 1;
  string description = 2;
  string sender_part_no = 3;
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes price_per_unit = 4 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes quantity = 5;
  string unit_of_measure = 6;
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes net_weight = 7 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_amount = 8 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_rate = 9 [(proofs.field_length) = 32];
  // A centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes tax_code = 10 [(proofs.field_length) = 32];
  // the total amount of the line item
  // Its a centrifuge decimal number which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
  // eg: 38447.3214 would be represented as 38447321400000000000000
  bytes total_amount = 11 [(proofs.field_length) = 32];
  string purchase_order_number = 12;
  string purchase_order_item_number = 13;
  string delivery_note_number = 14;
}
