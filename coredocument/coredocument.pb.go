// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coredocument.proto

/*
Package coredocument is a generated protocol buffer package.

It is generated from these files:
	coredocument.proto

It has these top-level messages:
	CoreDocument
	Signature
	AccessControlEntry
	AccessControlSchema
	FieldAccess
*/
package coredocument

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CoreDocument is a document that can be sent to different nodes and anchored on chain
type CoreDocument struct {
	// Identifier
	// ----------
	// This is for convenience: the first identifier that was ever used to refer to a
	// document is kept here. Internally the centrifuge node indexes & bundles documents
	// by original identifier.
	DocumentIdentifier []byte `protobuf:"bytes,9,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	// The current identifier is the location of the current anchor on chain and is used to
	// refer to the current state.
	CurrentIdentifier []byte `protobuf:"bytes,3,opt,name=current_identifier,json=currentIdentifier,proto3" json:"current_identifier,omitempty"`
	// When creating the next version this should be used.
	NextIdentifier []byte `protobuf:"bytes,4,opt,name=next_identifier,json=nextIdentifier,proto3" json:"next_identifier,omitempty"`
	// Root
	PreviousRoot   []byte `protobuf:"bytes,2,opt,name=previous_root,json=previousRoot,proto3" json:"previous_root,omitempty"`
	DataMerkleRoot []byte `protobuf:"bytes,5,opt,name=data_merkle_root,json=dataMerkleRoot,proto3" json:"data_merkle_root,omitempty"`
	DocumentRoot   []byte `protobuf:"bytes,7,opt,name=document_root,json=documentRoot,proto3" json:"document_root,omitempty"`
	// Signatures
	Signatures []*Signature `protobuf:"bytes,6,rep,name=signatures" json:"signatures,omitempty"`
	// List of collaborators on this document. These Centrifuge Identities have access
	// to the document and should receive new versions whenever a document is updated.
	Collaborators [][]byte              `protobuf:"bytes,10,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	Acl           []*AccessControlEntry `protobuf:"bytes,11,rep,name=acl" json:"acl,omitempty"`
	// The previous document is referenced here but doesn't need to be provided and can
	// be left blank
	PreviousVersions []*CoreDocument `protobuf:"bytes,8,rep,name=previous_versions,json=previousVersions" json:"previous_versions,omitempty"`
	// Document a serialized document
	EmbeddedData      *google_protobuf.Any `protobuf:"bytes,13,opt,name=embedded_data,json=embeddedData" json:"embedded_data,omitempty"`
	EmbeddedDataSalts *google_protobuf.Any `protobuf:"bytes,14,opt,name=embedded_data_salts,json=embeddedDataSalts" json:"embedded_data_salts,omitempty"`
}

func (m *CoreDocument) Reset()                    { *m = CoreDocument{} }
func (m *CoreDocument) String() string            { return proto.CompactTextString(m) }
func (*CoreDocument) ProtoMessage()               {}
func (*CoreDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CoreDocument) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetCurrentIdentifier() []byte {
	if m != nil {
		return m.CurrentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetNextIdentifier() []byte {
	if m != nil {
		return m.NextIdentifier
	}
	return nil
}

func (m *CoreDocument) GetPreviousRoot() []byte {
	if m != nil {
		return m.PreviousRoot
	}
	return nil
}

func (m *CoreDocument) GetDataMerkleRoot() []byte {
	if m != nil {
		return m.DataMerkleRoot
	}
	return nil
}

func (m *CoreDocument) GetDocumentRoot() []byte {
	if m != nil {
		return m.DocumentRoot
	}
	return nil
}

func (m *CoreDocument) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *CoreDocument) GetCollaborators() [][]byte {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *CoreDocument) GetAcl() []*AccessControlEntry {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *CoreDocument) GetPreviousVersions() []*CoreDocument {
	if m != nil {
		return m.PreviousVersions
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedData() *google_protobuf.Any {
	if m != nil {
		return m.EmbeddedData
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedDataSalts() *google_protobuf.Any {
	if m != nil {
		return m.EmbeddedDataSalts
	}
	return nil
}

// Signature contains the entity ID, public key used and signature)
type Signature struct {
	EntityId  []byte `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Signature) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// AccessControlEntry defines a member of the document
type AccessControlEntry struct {
	// All identities listed
	Identity [][]byte `protobuf:"bytes,1,rep,name=identity,proto3" json:"identity,omitempty"`
	// There are two ways to describe the acl schema. One of the standard ACL schemas can be referenced by a
	// unique identifier or a schema can be embedded.
	AclSchemaIdentifier []byte               `protobuf:"bytes,2,opt,name=acl_schema_identifier,json=aclSchemaIdentifier,proto3" json:"acl_schema_identifier,omitempty"`
	EmbeddedAclSchema   *AccessControlSchema `protobuf:"bytes,3,opt,name=embedded_acl_schema,json=embeddedAclSchema" json:"embedded_acl_schema,omitempty"`
}

func (m *AccessControlEntry) Reset()                    { *m = AccessControlEntry{} }
func (m *AccessControlEntry) String() string            { return proto.CompactTextString(m) }
func (*AccessControlEntry) ProtoMessage()               {}
func (*AccessControlEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccessControlEntry) GetIdentity() [][]byte {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *AccessControlEntry) GetAclSchemaIdentifier() []byte {
	if m != nil {
		return m.AclSchemaIdentifier
	}
	return nil
}

func (m *AccessControlEntry) GetEmbeddedAclSchema() *AccessControlSchema {
	if m != nil {
		return m.EmbeddedAclSchema
	}
	return nil
}

type AccessControlSchema struct {
	// Set either to true to grant access to also look at past versions of the document and/or future updates
	// to the document.
	GrantPastVersionAccess           bool                        `protobuf:"varint,2,opt,name=grant_past_version_access,json=grantPastVersionAccess" json:"grant_past_version_access,omitempty"`
	GrantFutureVersionAccess         bool                        `protobuf:"varint,3,opt,name=grant_future_version_access,json=grantFutureVersionAccess" json:"grant_future_version_access,omitempty"`
	GrantAccessToFutureVersionsUntil *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=grant_access_to_future_versions_until,json=grantAccessToFutureVersionsUntil" json:"grant_access_to_future_versions_until,omitempty"`
	// TODO: how granular do we want to grant these permissions? Fields?
	ReadFields  []*FieldAccess `protobuf:"bytes,5,rep,name=read_fields,json=readFields" json:"read_fields,omitempty"`
	WriteFields []*FieldAccess `protobuf:"bytes,6,rep,name=write_fields,json=writeFields" json:"write_fields,omitempty"`
}

func (m *AccessControlSchema) Reset()                    { *m = AccessControlSchema{} }
func (m *AccessControlSchema) String() string            { return proto.CompactTextString(m) }
func (*AccessControlSchema) ProtoMessage()               {}
func (*AccessControlSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccessControlSchema) GetGrantPastVersionAccess() bool {
	if m != nil {
		return m.GrantPastVersionAccess
	}
	return false
}

func (m *AccessControlSchema) GetGrantFutureVersionAccess() bool {
	if m != nil {
		return m.GrantFutureVersionAccess
	}
	return false
}

func (m *AccessControlSchema) GetGrantAccessToFutureVersionsUntil() *google_protobuf1.Timestamp {
	if m != nil {
		return m.GrantAccessToFutureVersionsUntil
	}
	return nil
}

func (m *AccessControlSchema) GetReadFields() []*FieldAccess {
	if m != nil {
		return m.ReadFields
	}
	return nil
}

func (m *AccessControlSchema) GetWriteFields() []*FieldAccess {
	if m != nil {
		return m.WriteFields
	}
	return nil
}

type FieldAccess struct {
	// TODO: how do we identify field names?
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
}

func (m *FieldAccess) Reset()                    { *m = FieldAccess{} }
func (m *FieldAccess) String() string            { return proto.CompactTextString(m) }
func (*FieldAccess) ProtoMessage()               {}
func (*FieldAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FieldAccess) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func init() {
	proto.RegisterType((*CoreDocument)(nil), "coredocument.CoreDocument")
	proto.RegisterType((*Signature)(nil), "coredocument.Signature")
	proto.RegisterType((*AccessControlEntry)(nil), "coredocument.AccessControlEntry")
	proto.RegisterType((*AccessControlSchema)(nil), "coredocument.AccessControlSchema")
	proto.RegisterType((*FieldAccess)(nil), "coredocument.FieldAccess")
}

func init() { proto.RegisterFile("coredocument.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x95, 0xa6, 0xed, 0x97, 0xdc, 0x24, 0xfd, 0xda, 0x09, 0x7f, 0xdc, 0x14, 0x44, 0x48,
	0x41, 0x64, 0x41, 0x13, 0x29, 0x2c, 0x50, 0xab, 0xb2, 0x28, 0x2d, 0x45, 0x15, 0x02, 0x81, 0x5b,
	0x58, 0xb0, 0xb1, 0x26, 0xf6, 0x4d, 0x6a, 0xd5, 0x9e, 0x89, 0x66, 0xc6, 0x85, 0x3c, 0x19, 0xaf,
	0xc4, 0x13, 0xb0, 0x46, 0xbe, 0x13, 0xbb, 0x76, 0x40, 0x65, 0xe9, 0x73, 0x7f, 0xe7, 0xd8, 0xbd,
	0xf7, 0x34, 0xc0, 0x7c, 0xa9, 0x30, 0x90, 0x7e, 0x12, 0xa3, 0x30, 0x83, 0x99, 0x92, 0x46, 0xb2,
	0x66, 0x51, 0xeb, 0x6c, 0x4f, 0xa5, 0x9c, 0x46, 0x38, 0xa4, 0xd9, 0x38, 0x99, 0x0c, 0xb9, 0x98,
	0x5b, 0xb0, 0xf3, 0x68, 0x79, 0x64, 0xc2, 0x18, 0xb5, 0xe1, 0xf1, 0xcc, 0x02, 0xbd, 0x9f, 0xab,
	0xd0, 0x3c, 0x96, 0x0a, 0x4f, 0x16, 0x61, 0x6c, 0x08, 0xed, 0x2c, 0xd8, 0x0b, 0x03, 0x14, 0x26,
	0x9c, 0x84, 0xa8, 0x9c, 0x7a, 0xb7, 0xd2, 0x6f, 0xba, 0x2c, 0x1b, 0x9d, 0xe5, 0x13, 0xb6, 0x07,
	0xcc, 0x4f, 0x94, 0x5a, 0xe2, 0xab, 0xc4, 0x6f, 0x2d, 0x26, 0x05, 0xfc, 0x19, 0xfc, 0x2f, 0xf0,
	0x7b, 0x89, 0x5d, 0x25, 0x76, 0x23, 0x95, 0x0b, 0xe0, 0x2e, 0xb4, 0x66, 0x0a, 0xaf, 0x43, 0x99,
	0x68, 0x4f, 0x49, 0x69, 0x9c, 0x15, 0xc2, 0x9a, 0x99, 0xe8, 0x4a, 0x69, 0x58, 0x1f, 0x36, 0x03,
	0x6e, 0xb8, 0x17, 0xa3, 0xba, 0x8a, 0xd0, 0x72, 0x6b, 0x36, 0x2e, 0xd5, 0xdf, 0x93, 0x4c, 0xe4,
	0x2e, 0xb4, 0xf2, 0xbf, 0x8b, 0xb0, 0xff, 0x6c, 0x5c, 0x26, 0x12, 0xf4, 0x12, 0x40, 0x87, 0x53,
	0xc1, 0x4d, 0xa2, 0x50, 0x3b, 0xeb, 0xdd, 0x6a, 0xbf, 0x31, 0xba, 0x3f, 0x28, 0x1d, 0xe0, 0x3c,
	0x9b, 0xbb, 0x05, 0x94, 0x3d, 0x81, 0x96, 0x2f, 0xa3, 0x88, 0x8f, 0xa5, 0xe2, 0x46, 0x2a, 0xed,
	0x40, 0xb7, 0xda, 0x6f, 0xba, 0x65, 0x91, 0x8d, 0xa0, 0xca, 0xfd, 0xc8, 0x69, 0x50, 0x6e, 0xb7,
	0x9c, 0x7b, 0xe4, 0xfb, 0xa8, 0xf5, 0xb1, 0x14, 0x46, 0xc9, 0xe8, 0x8d, 0x30, 0x6a, 0xee, 0xa6,
	0x30, 0x7b, 0x0b, 0x5b, 0xf9, 0x1a, 0xae, 0x51, 0xe9, 0x50, 0x0a, 0xed, 0xd4, 0x28, 0xa1, 0x53,
	0x4e, 0x28, 0x9e, 0xd1, 0xdd, 0xcc, 0x4c, 0x5f, 0x16, 0x1e, 0xb6, 0x0f, 0x2d, 0x8c, 0xc7, 0x18,
	0x04, 0x18, 0x78, 0xe9, 0x6e, 0x9c, 0x56, 0xb7, 0xd2, 0x6f, 0x8c, 0xee, 0x0c, 0x6c, 0x45, 0x06,
	0x59, 0x45, 0x06, 0x47, 0x62, 0xee, 0x36, 0x33, 0xf4, 0x84, 0x1b, 0xce, 0x4e, 0xa0, 0x5d, 0xb2,
	0x7a, 0x9a, 0x47, 0x46, 0x3b, 0x1b, 0xb7, 0x04, 0x6c, 0x15, 0x03, 0xce, 0x53, 0xbc, 0x87, 0x50,
	0xcf, 0x97, 0xc7, 0x76, 0xa0, 0x9e, 0x5e, 0xda, 0xcc, 0xbd, 0x30, 0x70, 0x2a, 0x74, 0x8a, 0x9a,
	0x15, 0xce, 0x02, 0xf6, 0x10, 0x60, 0x96, 0x8c, 0xa3, 0xd0, 0xf7, 0xae, 0x70, 0xbe, 0xb8, 0x7b,
	0xdd, 0x2a, 0xef, 0x70, 0xce, 0x1e, 0x40, 0x3d, 0x5f, 0xfd, 0xa2, 0x68, 0x37, 0x42, 0xef, 0x47,
	0x05, 0xd8, 0x9f, 0xcb, 0x64, 0x1d, 0xa8, 0xd9, 0xca, 0x99, 0xb9, 0x53, 0xa1, 0xe3, 0xe4, 0xcf,
	0x6c, 0x04, 0x77, 0xb9, 0x1f, 0x79, 0xda, 0xbf, 0xc4, 0x98, 0x17, 0x9b, 0x69, 0x5f, 0xdd, 0xe6,
	0x7e, 0x74, 0x4e, 0xb3, 0x42, 0x3d, 0x3f, 0x15, 0x76, 0x72, 0x63, 0xa6, 0xcf, 0x69, 0x8c, 0x1e,
	0xdf, 0x72, 0x5b, 0x9b, 0x74, 0xb3, 0xa0, 0xa3, 0x2c, 0xbc, 0xf7, 0x6b, 0x05, 0xda, 0x7f, 0x41,
	0xd9, 0x3e, 0x6c, 0x4f, 0x15, 0x17, 0xc6, 0x9b, 0x71, 0x6d, 0xb2, 0x12, 0x78, 0x9c, 0x48, 0xfa,
	0xc4, 0x9a, 0x7b, 0x8f, 0x80, 0x8f, 0x5c, 0x9b, 0xc5, 0xbd, 0x6d, 0x0e, 0x7b, 0x05, 0x3b, 0xd6,
	0x3a, 0x49, 0xd2, 0xe5, 0x2c, 0x9b, 0xab, 0x64, 0x76, 0x08, 0x39, 0x25, 0xa2, 0x6c, 0xbf, 0x82,
	0xa7, 0xd6, 0x6e, 0x79, 0xcf, 0xc8, 0xa5, 0x20, 0xed, 0x25, 0xc2, 0x84, 0x11, 0xfd, 0x0b, 0xa7,
	0x85, 0x5c, 0xae, 0xc2, 0x45, 0xf6, 0x73, 0xe3, 0x76, 0x29, 0xc8, 0xe6, 0x5e, 0xc8, 0xd2, 0xcb,
	0xf4, 0xe7, 0x34, 0x83, 0x1d, 0x40, 0x43, 0x21, 0x0f, 0xbc, 0x49, 0x88, 0x51, 0xa0, 0x9d, 0x35,
	0xea, 0xf8, 0x76, 0x79, 0x93, 0xa7, 0xe9, 0xcc, 0x86, 0xb8, 0x90, 0xd2, 0x24, 0x68, 0x76, 0x08,
	0xcd, 0x6f, 0x2a, 0x34, 0x98, 0x99, 0xd7, 0xff, 0x65, 0x6e, 0x10, 0x6e, 0xdd, 0xbd, 0xe7, 0xd0,
	0x28, 0xcc, 0xd2, 0xfa, 0x51, 0x8c, 0x27, 0x78, 0x8c, 0x54, 0xce, 0xba, 0x5b, 0x27, 0xe5, 0x03,
	0x8f, 0xf1, 0xf5, 0xe1, 0xd7, 0x83, 0x69, 0x68, 0x2e, 0x93, 0xf1, 0xc0, 0x97, 0xf1, 0xf0, 0x18,
	0x85, 0x51, 0xe1, 0x24, 0x99, 0xe2, 0x99, 0xf0, 0x87, 0x7e, 0xfe, 0xb4, 0x97, 0xed, 0x40, 0x0f,
	0x8b, 0x1f, 0x31, 0x5e, 0x27, 0xfd, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xcb, 0xfd,
	0x7b, 0xd7, 0x05, 0x00, 0x00,
}
