syntax = "proto3";

package coredocument;

option go_package = "coredocumentpb";
option java_multiple_files = true;
option java_outer_classname = "CoredocumentProto";
option java_package = "com.coredocument";

import "google/protobuf/any.proto";
import "precise-proofs/proofs/proto/proof.proto";

// `CoreDocument` is a document that can be sent to different nodes and anchored 
// on chain. It handles all the generic features native Centrifuge Documents support:
// 
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
message CoreDocument {
  // # Identifiers
  // CoreDocument has two kinds of identifiers, the `document_identifier` is assigned 
  // once per document and stays the same for the lifetime of the document.
  // document_identifier is the first ID ever used to anchor the document on chain and 
  // is used internally to store all future versions. The `current_identifier` and the 
  // `next_identifier` refer only to this particular version.
  // 
  // 32 byte value
  bytes document_identifier = 9;
  // current_identifier is the identifier used to refer to the current state of the document.
  // 
  // 32 byte value
  bytes current_identifier = 3;
  // next_identifier is the identifier that is going to be used for the next version if any 
  // party wants to update the state.
  bytes next_identifier = 4;
  // # Merkle roots
  // document_root the root of all roots. It's signature_root along with a list of all signatures
  bytes document_root = 7 [
    (proofs.exclude_from_tree) = true
  ];
  // signing_root is the Merkle root calculated from all fields on the document that need 
  // to be signed. This is all fields except for the signatures themselves and the `document_root`. 
  bytes signing_root = 10 [
    (proofs.exclude_from_tree) = true
  ];
  // previous_root is the `document_root` of the previous version of the document
  bytes previous_root = 2;
  // data_root is the Merkle root calculated for the `embedded_data` & `embedded_salts` document (such as an invoice).
  bytes data_root = 5;
  // Signatures
  // Signatures of the signature_root by centrifuge identities. This array should be sorted by the Centrifuge ID.
  repeated Signature signatures = 6 [
    (proofs.exclude_from_tree) = true
  ];
  // Document a serialized document
  google.protobuf.Any embedded_data = 13 [
    (proofs.exclude_from_tree) = true
  ];
  google.protobuf.Any embedded_data_salts = 14 [
    (proofs.exclude_from_tree) = true
  ];
  // CoreDocumentSalts is inlined
  CoreDocumentSalts coredocument_salts = 15 [
    (proofs.exclude_from_tree) = true
  ];
}

message CoreDocumentSalts {
  bytes document_identifier = 9;
  bytes current_identifier = 3;
  bytes next_identifier = 4;
  bytes previous_root = 2;
  bytes data_root = 5;
}

// Signature contains the entity ID, public key used and signature)
message Signature {
  // `entity_id` is the CentrifugeID of the entity signing the document.
  bytes entity_id = 1;
  // `public_key` is the public key of the `entity` used for signing the `CoreDocument`
  bytes public_key = 2;
  bytes signature = 3;
}
