syntax = "proto3";

package coredocument;

option go_package = "coredocumentpb";
option java_multiple_files = true;
option java_outer_classname = "CoredocumentProto";
option java_package = "com.coredocument";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "precise-proofs/proofs/proto/proof.proto";

// `CoreDocument` is a document that can be sent to different nodes and anchored 
// on chain. It handles all the generic features native Centrifuge Documents support:
// 
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
message CoreDocument {
  // # Identifiers
  // CoreDocument has two kinds of identifiers, the `document_identifier` is assigned 
  // once per document and stays the same for the lifetime of the document.
  // document_identifier is the first ID ever used to anchor the document on chain and 
  // is used internally to store all future versions. The `previous_version`, `current_version`, and the
  // `next_version` refer only to a particular version.
  // 
  // 32 byte value
  bytes document_identifier = 9;
  // previous_version refers to the previous state of the document.
  // 32 byte value
  bytes previous_version = 16;
  // current_version is the version used to refer to the current state of the document.
  // 32 byte value
  bytes current_version = 3;
  // next_version is the version that is going to be used for the next version if any
  // party wants to update the state.
  bytes next_version = 4;
  // # Merkle roots
  // document_root the root of all roots. It's signature_root along with a list of all signatures
  bytes document_root = 7 [
    (proofs.exclude_from_tree) = true
  ];
  // signing_root is the Merkle root calculated from all fields on the document that need 
  // to be signed. This is all fields except for the signatures themselves and the `document_root`. 
  bytes signing_root = 10 [
    (proofs.exclude_from_tree) = true
  ];
  // previous_root is the `document_root` of the previous version of the document
  bytes previous_root = 2 [
    (proofs.hashed_field) = true
  ];
  // data_root is the Merkle root calculated for the `embedded_data` & `embedded_salts` document (such as an invoice).
  bytes data_root = 5 [
    (proofs.hashed_field) = true
  ];
  // Signatures
  // Signatures of the signature_root by centrifuge identities. This array should be sorted by the Centrifuge ID.
  repeated Signature signatures = 6 [
    (proofs.exclude_from_tree) = true
  ];
  // Document a serialized document
  google.protobuf.Any embedded_data = 13 [
    (proofs.exclude_from_tree) = true
  ];
  google.protobuf.Any embedded_data_salts = 14 [
    (proofs.exclude_from_tree) = true
  ];
  // CoreDocumentSalts is inlined
  CoreDocumentSalts coredocument_salts = 15 [
    (proofs.exclude_from_tree) = true
  ];
  // Collaborators involved in the document consensus
  repeated bytes collaborators = 17;
  // list of roles
  repeated RoleEntry roles = 1[
     (proofs.mapping_key) = "role_key"
  ];
  // read rules
  repeated ReadRule read_rules = 19;
}

message CoreDocumentSalts {
  bytes document_identifier = 9;
  bytes previous_version = 1;
  bytes current_version = 3;
  bytes next_version = 4;
  bytes previous_root = 2;
  bytes data_root = 5;
  repeated bytes collaborators = 6;
  bytes collaborators_length = 7;
  repeated SaltedRoleEntry roles = 8;
  bytes roles_length = 10;
  repeated SaltedReadRule read_rules = 11;
  bytes read_rules_length = 12;
}

// Signature contains the entity ID, public key used and signature)
message Signature {
  // `entity_id` is the CentrifugeID of the entity signing the document.
  bytes entity_id = 1;
  // `public_key` is the public key of the `entity` used for signing the `CoreDocument`
  bytes public_key = 2;
  bytes signature = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// Action defines the set of actions a collaborator can/have per document.
enum Action {
  ACTION_INVALID = 0;
  // read represents just reading the doc/fields
  ACTION_READ = 1;
  // read_sign represents reading as well the sign the documents. We will pick this one when requesting the signatures.
  ACTION_READ_SIGN = 2;
}

// Roles holds a list of collaborators, NFTs, and/or access tokens.
message Role {
  // collaborators holds the list of document collaborators
  repeated bytes collaborators = 3;
  // nfts is a list of registry address/tokenID pairs.
  // For easier verification in merkle proofs, the values are simply concatenated with the first 22 bytes being the NFT registry and the remaining 32 bytes the tokenID.
  repeated bytes nfts = 4;
  bytes access_token_identifier = 5;
}

message SaltedRole {
  repeated bytes collaborators = 2;
  bytes collaborators_length = 3;
  repeated bytes nfts = 4;
  bytes nfts_length = 5;
  bytes access_token_identifier = 6;
}

message ReadRule {
  repeated uint32 roles = 2;
  Action action = 4;
}

message SaltedReadRule {
  repeated bytes roles = 2;
  bytes roles_length = 3;
  bytes action = 4;
}

message RoleEntry {
  uint32 role_key = 1;
  Role role = 2;
}

message SaltedRoleEntry {
  bytes role_key = 1;
  SaltedRole role = 2;
}
