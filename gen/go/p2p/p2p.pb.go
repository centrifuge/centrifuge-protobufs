// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p/p2p.proto

package p2ppb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import coredocument "github.com/centrifuge/centrifuge-protobufs/gen/go/coredocument"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CentrifugeHeader struct {
	NetworkIdentifier  uint32 `protobuf:"varint,1,opt,name=network_identifier,json=networkIdentifier,proto3" json:"network_identifier,omitempty"`
	CentNodeVersion    string `protobuf:"bytes,2,opt,name=cent_node_version,json=centNodeVersion,proto3" json:"cent_node_version,omitempty"`
	SenderCentrifugeId []byte `protobuf:"bytes,3,opt,name=sender_centrifuge_id,json=senderCentrifugeId,proto3" json:"sender_centrifuge_id,omitempty"`
	// Signature of all fields of CentrifugeHeader (except itself) + body
	Signature *coredocument.Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Body message type
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CentrifugeHeader) Reset()         { *m = CentrifugeHeader{} }
func (m *CentrifugeHeader) String() string { return proto.CompactTextString(m) }
func (*CentrifugeHeader) ProtoMessage()    {}
func (*CentrifugeHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{0}
}
func (m *CentrifugeHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CentrifugeHeader.Unmarshal(m, b)
}
func (m *CentrifugeHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CentrifugeHeader.Marshal(b, m, deterministic)
}
func (dst *CentrifugeHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentrifugeHeader.Merge(dst, src)
}
func (m *CentrifugeHeader) XXX_Size() int {
	return xxx_messageInfo_CentrifugeHeader.Size(m)
}
func (m *CentrifugeHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CentrifugeHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CentrifugeHeader proto.InternalMessageInfo

func (m *CentrifugeHeader) GetNetworkIdentifier() uint32 {
	if m != nil {
		return m.NetworkIdentifier
	}
	return 0
}

func (m *CentrifugeHeader) GetCentNodeVersion() string {
	if m != nil {
		return m.CentNodeVersion
	}
	return ""
}

func (m *CentrifugeHeader) GetSenderCentrifugeId() []byte {
	if m != nil {
		return m.SenderCentrifugeId
	}
	return nil
}

func (m *CentrifugeHeader) GetSignature() *coredocument.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CentrifugeHeader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type CentrifugeEnvelope struct {
	Header               *CentrifugeHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body                 []byte            `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CentrifugeEnvelope) Reset()         { *m = CentrifugeEnvelope{} }
func (m *CentrifugeEnvelope) String() string { return proto.CompactTextString(m) }
func (*CentrifugeEnvelope) ProtoMessage()    {}
func (*CentrifugeEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{1}
}
func (m *CentrifugeEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CentrifugeEnvelope.Unmarshal(m, b)
}
func (m *CentrifugeEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CentrifugeEnvelope.Marshal(b, m, deterministic)
}
func (dst *CentrifugeEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentrifugeEnvelope.Merge(dst, src)
}
func (m *CentrifugeEnvelope) XXX_Size() int {
	return xxx_messageInfo_CentrifugeEnvelope.Size(m)
}
func (m *CentrifugeEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_CentrifugeEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_CentrifugeEnvelope proto.InternalMessageInfo

func (m *CentrifugeEnvelope) GetHeader() *CentrifugeHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CentrifugeEnvelope) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type SignatureRequest struct {
	Document             *coredocument.CoreDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SignatureRequest) Reset()         { *m = SignatureRequest{} }
func (m *SignatureRequest) String() string { return proto.CompactTextString(m) }
func (*SignatureRequest) ProtoMessage()    {}
func (*SignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{2}
}
func (m *SignatureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureRequest.Unmarshal(m, b)
}
func (m *SignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureRequest.Marshal(b, m, deterministic)
}
func (dst *SignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureRequest.Merge(dst, src)
}
func (m *SignatureRequest) XXX_Size() int {
	return xxx_messageInfo_SignatureRequest.Size(m)
}
func (m *SignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureRequest proto.InternalMessageInfo

func (m *SignatureRequest) GetDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

type SignatureResponse struct {
	Signature            *coredocument.Signature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SignatureResponse) Reset()         { *m = SignatureResponse{} }
func (m *SignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SignatureResponse) ProtoMessage()    {}
func (*SignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{3}
}
func (m *SignatureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureResponse.Unmarshal(m, b)
}
func (m *SignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureResponse.Marshal(b, m, deterministic)
}
func (dst *SignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureResponse.Merge(dst, src)
}
func (m *SignatureResponse) XXX_Size() int {
	return xxx_messageInfo_SignatureResponse.Size(m)
}
func (m *SignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureResponse proto.InternalMessageInfo

func (m *SignatureResponse) GetSignature() *coredocument.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AnchorDocumentRequest struct {
	Document             *coredocument.CoreDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AnchorDocumentRequest) Reset()         { *m = AnchorDocumentRequest{} }
func (m *AnchorDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*AnchorDocumentRequest) ProtoMessage()    {}
func (*AnchorDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{4}
}
func (m *AnchorDocumentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnchorDocumentRequest.Unmarshal(m, b)
}
func (m *AnchorDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnchorDocumentRequest.Marshal(b, m, deterministic)
}
func (dst *AnchorDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorDocumentRequest.Merge(dst, src)
}
func (m *AnchorDocumentRequest) XXX_Size() int {
	return xxx_messageInfo_AnchorDocumentRequest.Size(m)
}
func (m *AnchorDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorDocumentRequest proto.InternalMessageInfo

func (m *AnchorDocumentRequest) GetDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

type AnchorDocumentResponse struct {
	Accepted             bool     `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorDocumentResponse) Reset()         { *m = AnchorDocumentResponse{} }
func (m *AnchorDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*AnchorDocumentResponse) ProtoMessage()    {}
func (*AnchorDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_a766882c755ad76e, []int{5}
}
func (m *AnchorDocumentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnchorDocumentResponse.Unmarshal(m, b)
}
func (m *AnchorDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnchorDocumentResponse.Marshal(b, m, deterministic)
}
func (dst *AnchorDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorDocumentResponse.Merge(dst, src)
}
func (m *AnchorDocumentResponse) XXX_Size() int {
	return xxx_messageInfo_AnchorDocumentResponse.Size(m)
}
func (m *AnchorDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorDocumentResponse proto.InternalMessageInfo

func (m *AnchorDocumentResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func init() {
	proto.RegisterType((*CentrifugeHeader)(nil), "p2p.CentrifugeHeader")
	proto.RegisterType((*CentrifugeEnvelope)(nil), "p2p.CentrifugeEnvelope")
	proto.RegisterType((*SignatureRequest)(nil), "p2p.SignatureRequest")
	proto.RegisterType((*SignatureResponse)(nil), "p2p.SignatureResponse")
	proto.RegisterType((*AnchorDocumentRequest)(nil), "p2p.AnchorDocumentRequest")
	proto.RegisterType((*AnchorDocumentResponse)(nil), "p2p.AnchorDocumentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PServiceClient interface {
	// after the pre-commit the sender asks all participants to sign the new document version
	RequestDocumentSignature(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error)
	// after all signatures are collected the sender sends the document including the signatures
	SendAnchoredDocument(ctx context.Context, in *AnchorDocumentRequest, opts ...grpc.CallOption) (*AnchorDocumentResponse, error)
}

type p2PServiceClient struct {
	cc *grpc.ClientConn
}

func NewP2PServiceClient(cc *grpc.ClientConn) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) RequestDocumentSignature(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*SignatureResponse, error) {
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, "/p2p.P2PService/RequestDocumentSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) SendAnchoredDocument(ctx context.Context, in *AnchorDocumentRequest, opts ...grpc.CallOption) (*AnchorDocumentResponse, error) {
	out := new(AnchorDocumentResponse)
	err := c.cc.Invoke(ctx, "/p2p.P2PService/SendAnchoredDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServiceServer is the server API for P2PService service.
type P2PServiceServer interface {
	// after the pre-commit the sender asks all participants to sign the new document version
	RequestDocumentSignature(context.Context, *SignatureRequest) (*SignatureResponse, error)
	// after all signatures are collected the sender sends the document including the signatures
	SendAnchoredDocument(context.Context, *AnchorDocumentRequest) (*AnchorDocumentResponse, error)
}

func RegisterP2PServiceServer(s *grpc.Server, srv P2PServiceServer) {
	s.RegisterService(&_P2PService_serviceDesc, srv)
}

func _P2PService_RequestDocumentSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).RequestDocumentSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.P2PService/RequestDocumentSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).RequestDocumentSignature(ctx, req.(*SignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_SendAnchoredDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).SendAnchoredDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.P2PService/SendAnchoredDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).SendAnchoredDocument(ctx, req.(*AnchorDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2PService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestDocumentSignature",
			Handler:    _P2PService_RequestDocumentSignature_Handler,
		},
		{
			MethodName: "SendAnchoredDocument",
			Handler:    _P2PService_SendAnchoredDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2p/p2p.proto",
}

func init() { proto.RegisterFile("p2p/p2p.proto", fileDescriptor_p2p_a766882c755ad76e) }

var fileDescriptor_p2p_a766882c755ad76e = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x5f, 0x6b, 0x14, 0x31,
	0x14, 0xc5, 0x89, 0xfd, 0xe3, 0xf6, 0xb6, 0xc5, 0x6e, 0x68, 0xeb, 0x30, 0x0a, 0x2e, 0xf3, 0x34,
	0x08, 0xdd, 0x4a, 0xfc, 0xf3, 0x6e, 0xab, 0xe0, 0xf6, 0xc1, 0x0e, 0x59, 0x50, 0xf0, 0x65, 0xd8,
	0x4d, 0x6e, 0xdb, 0xa0, 0x4d, 0x62, 0x26, 0xb3, 0xd2, 0x6f, 0xe4, 0x67, 0xf3, 0x53, 0xc8, 0x64,
	0xfe, 0x75, 0x87, 0x3e, 0x08, 0xbe, 0x25, 0x39, 0x87, 0x73, 0x7f, 0xf7, 0x40, 0x60, 0xdf, 0x32,
	0x7b, 0x6a, 0x99, 0x9d, 0x5a, 0x67, 0xbc, 0xa1, 0x1b, 0x96, 0xd9, 0xf8, 0x85, 0x30, 0x0e, 0xa5,
	0x11, 0xe5, 0x2d, 0x6a, 0x7f, 0x7a, 0xff, 0x52, 0xbb, 0x92, 0x3f, 0x04, 0x0e, 0xce, 0x51, 0x7b,
	0xa7, 0xae, 0xca, 0x6b, 0xfc, 0x84, 0x0b, 0x89, 0x8e, 0x9e, 0x00, 0xd5, 0xe8, 0x7f, 0x19, 0xf7,
	0x3d, 0x57, 0x12, 0xb5, 0x57, 0x57, 0x0a, 0x5d, 0x44, 0x26, 0x24, 0xdd, 0xe7, 0xe3, 0x46, 0x99,
	0x75, 0x02, 0x7d, 0x09, 0x63, 0x81, 0xda, 0xe7, 0xda, 0x48, 0xcc, 0x57, 0xe8, 0x0a, 0x65, 0x74,
	0xf4, 0x68, 0x42, 0xd2, 0x1d, 0xfe, 0xa4, 0x12, 0x3e, 0x1b, 0x89, 0x5f, 0xea, 0x67, 0xfa, 0x0a,
	0x0e, 0x0b, 0xd4, 0x12, 0x5d, 0x2e, 0xba, 0xa9, 0xb9, 0x92, 0xd1, 0xc6, 0x84, 0xa4, 0x7b, 0x9c,
	0xd6, 0x5a, 0x0f, 0x34, 0x93, 0xf4, 0x2d, 0xec, 0x14, 0xea, 0x5a, 0x2f, 0x7c, 0xe9, 0x30, 0xda,
	0x9c, 0x90, 0x74, 0x97, 0x3d, 0x9d, 0xae, 0x6d, 0x32, 0x6f, 0x65, 0xde, 0x3b, 0x29, 0x85, 0x4d,
	0x7f, 0x67, 0x31, 0xda, 0x0a, 0x1c, 0xe1, 0x9c, 0x7c, 0x05, 0xda, 0x47, 0x7f, 0xd4, 0x2b, 0xfc,
	0x61, 0x2c, 0xd2, 0x13, 0xd8, 0xbe, 0x09, 0x7b, 0x87, 0x0d, 0x77, 0xd9, 0xd1, 0xb4, 0x2a, 0x71,
	0x58, 0x0a, 0x6f, 0x4c, 0x55, 0xf0, 0xd2, 0xc8, 0xbb, 0xb0, 0xe0, 0x1e, 0x0f, 0xe7, 0xe4, 0x02,
	0x0e, 0x7a, 0x08, 0xfc, 0x59, 0x62, 0xe1, 0xe9, 0x3b, 0x18, 0xb5, 0x84, 0x4d, 0x70, 0xbc, 0x8e,
	0x7d, 0x6e, 0x1c, 0x7e, 0x68, 0x2e, 0xbc, 0xf3, 0x26, 0x17, 0x30, 0xbe, 0x97, 0x55, 0x58, 0xa3,
	0x0b, 0x5c, 0x2f, 0x81, 0xfc, 0x6b, 0x09, 0xc9, 0x25, 0x1c, 0xbd, 0xd7, 0xe2, 0xc6, 0xb8, 0x6e,
	0xce, 0x7f, 0xc2, 0xbd, 0x81, 0xe3, 0x61, 0x60, 0x43, 0x18, 0xc3, 0x68, 0x21, 0x04, 0x5a, 0x8f,
	0x32, 0x24, 0x8e, 0x78, 0x77, 0x67, 0xbf, 0x09, 0x40, 0xc6, 0xb2, 0x39, 0xba, 0x95, 0x12, 0x48,
	0x67, 0x10, 0x35, 0x1c, 0x6d, 0x4a, 0x07, 0x4f, 0xeb, 0xf2, 0x87, 0x65, 0xc6, 0xc7, 0xc3, 0xe7,
	0x66, 0xea, 0x25, 0x1c, 0xce, 0x51, 0xcb, 0x9a, 0x09, 0x65, 0x9b, 0x47, 0xe3, 0xe0, 0x7f, 0x70,
	0xf7, 0xf8, 0xd9, 0x83, 0x5a, 0x1d, 0x78, 0xf6, 0x1c, 0x1e, 0x0b, 0x73, 0x5b, 0x39, 0xce, 0x46,
	0x19, 0xb3, 0x59, 0xf5, 0x49, 0x32, 0xf2, 0x6d, 0xcb, 0x32, 0x6b, 0x97, 0xcb, 0xed, 0xf0, 0x69,
	0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x38, 0x9c, 0xdc, 0x7d, 0x6b, 0x03, 0x00, 0x00,
}
