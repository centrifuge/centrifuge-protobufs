// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p/p2p.proto

package p2ppb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import coredocument "github.com/CentrifugeInc/centrifuge-protobufs/gen/go/coredocument"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// P2PMessage wraps a single CoreDocument to be transferred to another node
type P2PMessage struct {
	NetworkIdentifier uint32 `protobuf:"varint,1,opt,name=network_identifier,json=networkIdentifier,proto3" json:"network_identifier,omitempty"`
	CentNodeVersion   string `protobuf:"bytes,2,opt,name=cent_node_version,json=centNodeVersion,proto3" json:"cent_node_version,omitempty"`
	CentrifugeId      []byte `protobuf:"bytes,3,opt,name=centrifuge_id,json=centrifugeId,proto3" json:"centrifuge_id,omitempty"`
	// Open questions in the P2PMessage
	// - should we include the document schema so the client can refuse it right away?
	// - how do you determine if the node is the right recipient for the current
	//   transaction (e.g. two different nodes with different keys are used for
	//   one centrifuge ID handling different data).
	Document             *coredocument.CoreDocument `protobuf:"bytes,5,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *P2PMessage) Reset()         { *m = P2PMessage{} }
func (m *P2PMessage) String() string { return proto.CompactTextString(m) }
func (*P2PMessage) ProtoMessage()    {}
func (*P2PMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_ebc83273b0fc0017, []int{0}
}
func (m *P2PMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage.Unmarshal(m, b)
}
func (m *P2PMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage.Marshal(b, m, deterministic)
}
func (dst *P2PMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage.Merge(dst, src)
}
func (m *P2PMessage) XXX_Size() int {
	return xxx_messageInfo_P2PMessage.Size(m)
}
func (m *P2PMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage proto.InternalMessageInfo

func (m *P2PMessage) GetNetworkIdentifier() uint32 {
	if m != nil {
		return m.NetworkIdentifier
	}
	return 0
}

func (m *P2PMessage) GetCentNodeVersion() string {
	if m != nil {
		return m.CentNodeVersion
	}
	return ""
}

func (m *P2PMessage) GetCentrifugeId() []byte {
	if m != nil {
		return m.CentrifugeId
	}
	return nil
}

func (m *P2PMessage) GetDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

type P2PReply struct {
	CentNodeVersion      string                     `protobuf:"bytes,1,opt,name=cent_node_version,json=centNodeVersion,proto3" json:"cent_node_version,omitempty"`
	Document             *coredocument.CoreDocument `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *P2PReply) Reset()         { *m = P2PReply{} }
func (m *P2PReply) String() string { return proto.CompactTextString(m) }
func (*P2PReply) ProtoMessage()    {}
func (*P2PReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_ebc83273b0fc0017, []int{1}
}
func (m *P2PReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PReply.Unmarshal(m, b)
}
func (m *P2PReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PReply.Marshal(b, m, deterministic)
}
func (dst *P2PReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PReply.Merge(dst, src)
}
func (m *P2PReply) XXX_Size() int {
	return xxx_messageInfo_P2PReply.Size(m)
}
func (m *P2PReply) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PReply.DiscardUnknown(m)
}

var xxx_messageInfo_P2PReply proto.InternalMessageInfo

func (m *P2PReply) GetCentNodeVersion() string {
	if m != nil {
		return m.CentNodeVersion
	}
	return ""
}

func (m *P2PReply) GetDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PMessage)(nil), "p2p.P2PMessage")
	proto.RegisterType((*P2PReply)(nil), "p2p.P2PReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PServiceClient interface {
	// Post transmits a new version of the document to the recipient
	Post(ctx context.Context, in *P2PMessage, opts ...grpc.CallOption) (*P2PReply, error)
}

type p2PServiceClient struct {
	cc *grpc.ClientConn
}

func NewP2PServiceClient(cc *grpc.ClientConn) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) Post(ctx context.Context, in *P2PMessage, opts ...grpc.CallOption) (*P2PReply, error) {
	out := new(P2PReply)
	err := c.cc.Invoke(ctx, "/p2p.P2PService/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServiceServer is the server API for P2PService service.
type P2PServiceServer interface {
	// Post transmits a new version of the document to the recipient
	Post(context.Context, *P2PMessage) (*P2PReply, error)
}

func RegisterP2PServiceServer(s *grpc.Server, srv P2PServiceServer) {
	s.RegisterService(&_P2PService_serviceDesc, srv)
}

func _P2PService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.P2PService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).Post(ctx, req.(*P2PMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2PService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _P2PService_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2p/p2p.proto",
}

func init() { proto.RegisterFile("p2p/p2p.proto", fileDescriptor_p2p_ebc83273b0fc0017) }

var fileDescriptor_p2p_ebc83273b0fc0017 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xd9, 0x37, 0x6f, 0x35, 0xae, 0x0d, 0xa5, 0x7b, 0x0a, 0x41, 0x30, 0x54, 0x90, 0x20,
	0x98, 0xc2, 0x2a, 0x7e, 0x80, 0xea, 0xa5, 0x07, 0x65, 0x89, 0xe0, 0xc1, 0x4b, 0xb0, 0xd9, 0x69,
	0x59, 0xb4, 0x3b, 0xc3, 0x66, 0x5b, 0xf1, 0xfb, 0xf9, 0xc1, 0x24, 0xe9, 0x5f, 0xa1, 0x07, 0x8f,
	0xf3, 0x7b, 0x06, 0xe6, 0xc7, 0x33, 0x3c, 0x22, 0x49, 0x43, 0x92, 0x94, 0x93, 0x43, 0x8f, 0x22,
	0x20, 0x49, 0xc9, 0x79, 0x85, 0x0e, 0x34, 0x56, 0x8b, 0x39, 0x58, 0x3f, 0xdc, 0x1f, 0x56, 0x5b,
	0x83, 0x6f, 0xc6, 0xb9, 0x92, 0xea, 0x11, 0xea, 0xfa, 0x6d, 0x06, 0xe2, 0x9a, 0x0b, 0x0b, 0xfe,
	0x13, 0xdd, 0x7b, 0x69, 0x34, 0x58, 0x6f, 0xa6, 0x06, 0x5c, 0xcc, 0x52, 0x96, 0x45, 0x45, 0x7f,
	0x9d, 0x8c, 0xb7, 0x81, 0xb8, 0xe2, 0xfd, 0x0a, 0xac, 0x2f, 0x2d, 0x6a, 0x28, 0x97, 0xe0, 0x6a,
	0x83, 0x36, 0xfe, 0x97, 0xb2, 0xec, 0xa4, 0xe8, 0x35, 0xc1, 0x13, 0x6a, 0x78, 0x59, 0x61, 0x71,
	0xc1, 0xa3, 0x06, 0x39, 0x33, 0x5d, 0xcc, 0xa0, 0x34, 0x3a, 0x0e, 0x52, 0x96, 0x75, 0x8b, 0xee,
	0x0e, 0x8e, 0xb5, 0xb8, 0xe3, 0xe1, 0x46, 0x30, 0xee, 0xa4, 0x2c, 0x3b, 0x95, 0x49, 0xfe, 0xcb,
	0xfa, 0x1e, 0x1d, 0x3c, 0xac, 0x87, 0x62, 0xbb, 0x3b, 0xb0, 0x3c, 0x54, 0x52, 0x15, 0x40, 0x1f,
	0x5f, 0x87, 0xa5, 0xd8, 0x61, 0xa9, 0xfd, 0x7b, 0xc1, 0xdf, 0xef, 0xc9, 0xdb, 0xb6, 0xb5, 0x67,
	0x70, 0x4b, 0x53, 0x81, 0xb8, 0xe4, 0xff, 0x15, 0xd6, 0x5e, 0xf4, 0xf2, 0xa6, 0xfe, 0x5d, 0x9d,
	0x49, 0xb4, 0x01, 0xad, 0xd9, 0xe8, 0x8c, 0x1f, 0x57, 0x38, 0x6f, 0xd8, 0x28, 0x54, 0x92, 0x54,
	0xf3, 0x01, 0xc5, 0x5e, 0x3b, 0x24, 0x89, 0x26, 0x93, 0xa3, 0xf6, 0x23, 0x37, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x90, 0x34, 0xe0, 0xfe, 0xc8, 0x01, 0x00, 0x00,
}
