// Code generated by protoc-gen-go. DO NOT EDIT.
// source: purchaseorder/purchaseorder.proto

package purchaseorderpb

import (
	fmt "fmt"
	common "github.com/centrifuge/centrifuge-protobufs/gen/go/common"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PurchaseOrderData is the default schema for a purchase order
type PurchaseOrderData struct {
	// purchase order status
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// purchase order number or reference number
	Number                  string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	SenderOrderId           string `protobuf:"bytes,3,opt,name=sender_order_id,json=senderOrderId,proto3" json:"sender_order_id,omitempty"`
	RecipientOrderId        string `protobuf:"bytes,4,opt,name=recipient_order_id,json=recipientOrderId,proto3" json:"recipient_order_id,omitempty"`
	RequisitionId           string `protobuf:"bytes,5,opt,name=requisition_id,json=requisitionId,proto3" json:"requisition_id,omitempty"`
	RequesterName           string `protobuf:"bytes,6,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	RequesterEmail          string `protobuf:"bytes,7,opt,name=requester_email,json=requesterEmail,proto3" json:"requester_email,omitempty"`
	ShipToCompanyName       string `protobuf:"bytes,8,opt,name=ship_to_company_name,json=shipToCompanyName,proto3" json:"ship_to_company_name,omitempty"`
	ShipToContactPersonName string `protobuf:"bytes,9,opt,name=ship_to_contact_person_name,json=shipToContactPersonName,proto3" json:"ship_to_contact_person_name,omitempty"`
	ShipToStreet1           string `protobuf:"bytes,10,opt,name=ship_to_street1,json=shipToStreet1,proto3" json:"ship_to_street1,omitempty"`
	ShipToStreet2           string `protobuf:"bytes,11,opt,name=ship_to_street2,json=shipToStreet2,proto3" json:"ship_to_street2,omitempty"`
	ShipToCity              string `protobuf:"bytes,12,opt,name=ship_to_city,json=shipToCity,proto3" json:"ship_to_city,omitempty"`
	ShipToZipcode           string `protobuf:"bytes,13,opt,name=ship_to_zipcode,json=shipToZipcode,proto3" json:"ship_to_zipcode,omitempty"`
	ShipToState             string `protobuf:"bytes,14,opt,name=ship_to_state,json=shipToState,proto3" json:"ship_to_state,omitempty"`
	ShipToCountry           string `protobuf:"bytes,15,opt,name=ship_to_country,json=shipToCountry,proto3" json:"ship_to_country,omitempty"`
	PaymentTerms            string `protobuf:"bytes,16,opt,name=payment_terms,json=paymentTerms,proto3" json:"payment_terms,omitempty"`
	Currency                string `protobuf:"bytes,17,opt,name=currency,proto3" json:"currency,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	TotalAmount []byte `protobuf:"bytes,18,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// centrifuge ID of the recipient
	Recipient []byte `protobuf:"bytes,19,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// centrifuge ID of the sender
	Sender               []byte                     `protobuf:"bytes,20,opt,name=sender,proto3" json:"sender,omitempty"`
	Comment              string                     `protobuf:"bytes,21,opt,name=comment,proto3" json:"comment,omitempty"`
	DateSent             *timestamp.Timestamp       `protobuf:"bytes,22,opt,name=date_sent,json=dateSent,proto3" json:"date_sent,omitempty"`
	DateConfirmed        *timestamp.Timestamp       `protobuf:"bytes,23,opt,name=date_confirmed,json=dateConfirmed,proto3" json:"date_confirmed,omitempty"`
	DateUpdated          *timestamp.Timestamp       `protobuf:"bytes,24,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	DateCreated          *timestamp.Timestamp       `protobuf:"bytes,25,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	Attachments          []*common.BinaryAttachment `protobuf:"bytes,26,rep,name=attachments,proto3" json:"attachments,omitempty"`
	LineItems            []*LineItem                `protobuf:"bytes,27,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	PaymentDetails       []*common.PaymentDetails   `protobuf:"bytes,28,rep,name=payment_details,json=paymentDetails,proto3" json:"payment_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PurchaseOrderData) Reset()         { *m = PurchaseOrderData{} }
func (m *PurchaseOrderData) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderData) ProtoMessage()    {}
func (*PurchaseOrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cdaff5eff29fb6, []int{0}
}

func (m *PurchaseOrderData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurchaseOrderData.Unmarshal(m, b)
}
func (m *PurchaseOrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurchaseOrderData.Marshal(b, m, deterministic)
}
func (m *PurchaseOrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderData.Merge(m, src)
}
func (m *PurchaseOrderData) XXX_Size() int {
	return xxx_messageInfo_PurchaseOrderData.Size(m)
}
func (m *PurchaseOrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderData.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderData proto.InternalMessageInfo

func (m *PurchaseOrderData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PurchaseOrderData) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *PurchaseOrderData) GetSenderOrderId() string {
	if m != nil {
		return m.SenderOrderId
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientOrderId() string {
	if m != nil {
		return m.RecipientOrderId
	}
	return ""
}

func (m *PurchaseOrderData) GetRequisitionId() string {
	if m != nil {
		return m.RequisitionId
	}
	return ""
}

func (m *PurchaseOrderData) GetRequesterName() string {
	if m != nil {
		return m.RequesterName
	}
	return ""
}

func (m *PurchaseOrderData) GetRequesterEmail() string {
	if m != nil {
		return m.RequesterEmail
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToCompanyName() string {
	if m != nil {
		return m.ShipToCompanyName
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToContactPersonName() string {
	if m != nil {
		return m.ShipToContactPersonName
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToStreet1() string {
	if m != nil {
		return m.ShipToStreet1
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToStreet2() string {
	if m != nil {
		return m.ShipToStreet2
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToCity() string {
	if m != nil {
		return m.ShipToCity
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToZipcode() string {
	if m != nil {
		return m.ShipToZipcode
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToState() string {
	if m != nil {
		return m.ShipToState
	}
	return ""
}

func (m *PurchaseOrderData) GetShipToCountry() string {
	if m != nil {
		return m.ShipToCountry
	}
	return ""
}

func (m *PurchaseOrderData) GetPaymentTerms() string {
	if m != nil {
		return m.PaymentTerms
	}
	return ""
}

func (m *PurchaseOrderData) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PurchaseOrderData) GetTotalAmount() []byte {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *PurchaseOrderData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *PurchaseOrderData) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PurchaseOrderData) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *PurchaseOrderData) GetDateSent() *timestamp.Timestamp {
	if m != nil {
		return m.DateSent
	}
	return nil
}

func (m *PurchaseOrderData) GetDateConfirmed() *timestamp.Timestamp {
	if m != nil {
		return m.DateConfirmed
	}
	return nil
}

func (m *PurchaseOrderData) GetDateUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.DateUpdated
	}
	return nil
}

func (m *PurchaseOrderData) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *PurchaseOrderData) GetAttachments() []*common.BinaryAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *PurchaseOrderData) GetLineItems() []*LineItem {
	if m != nil {
		return m.LineItems
	}
	return nil
}

func (m *PurchaseOrderData) GetPaymentDetails() []*common.PaymentDetails {
	if m != nil {
		return m.PaymentDetails
	}
	return nil
}

type LineItem struct {
	Status      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ItemNumber  string `protobuf:"bytes,2,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	AmountInvoiced []byte `protobuf:"bytes,4,opt,name=amount_invoiced,json=amountInvoiced,proto3" json:"amount_invoiced,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	AmountTotal       []byte `protobuf:"bytes,5,opt,name=amount_total,json=amountTotal,proto3" json:"amount_total,omitempty"`
	RequisitionNumber string `protobuf:"bytes,6,opt,name=requisition_number,json=requisitionNumber,proto3" json:"requisition_number,omitempty"`
	RequisitionItem   string `protobuf:"bytes,7,opt,name=requisition_item,json=requisitionItem,proto3" json:"requisition_item,omitempty"`
	PartNo            string `protobuf:"bytes,8,opt,name=part_no,json=partNo,proto3" json:"part_no,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	PricePerUnit []byte `protobuf:"bytes,9,opt,name=price_per_unit,json=pricePerUnit,proto3" json:"price_per_unit,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	UnitOfMeasure []byte `protobuf:"bytes,10,opt,name=unit_of_measure,json=unitOfMeasure,proto3" json:"unit_of_measure,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	Quantity []byte `protobuf:"bytes,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	ReceivedQuantity     []byte               `protobuf:"bytes,12,opt,name=received_quantity,json=receivedQuantity,proto3" json:"received_quantity,omitempty"`
	DateUpdated          *timestamp.Timestamp `protobuf:"bytes,13,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	DateCreated          *timestamp.Timestamp `protobuf:"bytes,14,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	RevisionNumber       int64                `protobuf:"varint,15,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	Activities           []*LineItemActivity  `protobuf:"bytes,16,rep,name=activities,proto3" json:"activities,omitempty"`
	TaxItems             []*TaxItem           `protobuf:"bytes,17,rep,name=tax_items,json=taxItems,proto3" json:"tax_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LineItem) Reset()         { *m = LineItem{} }
func (m *LineItem) String() string { return proto.CompactTextString(m) }
func (*LineItem) ProtoMessage()    {}
func (*LineItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cdaff5eff29fb6, []int{1}
}

func (m *LineItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LineItem.Unmarshal(m, b)
}
func (m *LineItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LineItem.Marshal(b, m, deterministic)
}
func (m *LineItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineItem.Merge(m, src)
}
func (m *LineItem) XXX_Size() int {
	return xxx_messageInfo_LineItem.Size(m)
}
func (m *LineItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LineItem.DiscardUnknown(m)
}

var xxx_messageInfo_LineItem proto.InternalMessageInfo

func (m *LineItem) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LineItem) GetItemNumber() string {
	if m != nil {
		return m.ItemNumber
	}
	return ""
}

func (m *LineItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LineItem) GetAmountInvoiced() []byte {
	if m != nil {
		return m.AmountInvoiced
	}
	return nil
}

func (m *LineItem) GetAmountTotal() []byte {
	if m != nil {
		return m.AmountTotal
	}
	return nil
}

func (m *LineItem) GetRequisitionNumber() string {
	if m != nil {
		return m.RequisitionNumber
	}
	return ""
}

func (m *LineItem) GetRequisitionItem() string {
	if m != nil {
		return m.RequisitionItem
	}
	return ""
}

func (m *LineItem) GetPartNo() string {
	if m != nil {
		return m.PartNo
	}
	return ""
}

func (m *LineItem) GetPricePerUnit() []byte {
	if m != nil {
		return m.PricePerUnit
	}
	return nil
}

func (m *LineItem) GetUnitOfMeasure() []byte {
	if m != nil {
		return m.UnitOfMeasure
	}
	return nil
}

func (m *LineItem) GetQuantity() []byte {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *LineItem) GetReceivedQuantity() []byte {
	if m != nil {
		return m.ReceivedQuantity
	}
	return nil
}

func (m *LineItem) GetDateUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.DateUpdated
	}
	return nil
}

func (m *LineItem) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *LineItem) GetRevisionNumber() int64 {
	if m != nil {
		return m.RevisionNumber
	}
	return 0
}

func (m *LineItem) GetActivities() []*LineItemActivity {
	if m != nil {
		return m.Activities
	}
	return nil
}

func (m *LineItem) GetTaxItems() []*TaxItem {
	if m != nil {
		return m.TaxItems
	}
	return nil
}

type TaxItem struct {
	ItemNumber              string `protobuf:"bytes,1,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	PurchaseOrderItemNumber string `protobuf:"bytes,2,opt,name=purchase_order_item_number,json=purchaseOrderItemNumber,proto3" json:"purchase_order_item_number,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	TaxAmount []byte `protobuf:"bytes,3,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	TaxRate []byte `protobuf:"bytes,4,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	TaxCode []byte `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	TaxBaseAmount        []byte   `protobuf:"bytes,6,opt,name=tax_base_amount,json=taxBaseAmount,proto3" json:"tax_base_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaxItem) Reset()         { *m = TaxItem{} }
func (m *TaxItem) String() string { return proto.CompactTextString(m) }
func (*TaxItem) ProtoMessage()    {}
func (*TaxItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cdaff5eff29fb6, []int{2}
}

func (m *TaxItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaxItem.Unmarshal(m, b)
}
func (m *TaxItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaxItem.Marshal(b, m, deterministic)
}
func (m *TaxItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxItem.Merge(m, src)
}
func (m *TaxItem) XXX_Size() int {
	return xxx_messageInfo_TaxItem.Size(m)
}
func (m *TaxItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxItem.DiscardUnknown(m)
}

var xxx_messageInfo_TaxItem proto.InternalMessageInfo

func (m *TaxItem) GetItemNumber() string {
	if m != nil {
		return m.ItemNumber
	}
	return ""
}

func (m *TaxItem) GetPurchaseOrderItemNumber() string {
	if m != nil {
		return m.PurchaseOrderItemNumber
	}
	return ""
}

func (m *TaxItem) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *TaxItem) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *TaxItem) GetTaxCode() []byte {
	if m != nil {
		return m.TaxCode
	}
	return nil
}

func (m *TaxItem) GetTaxBaseAmount() []byte {
	if m != nil {
		return m.TaxBaseAmount
	}
	return nil
}

type LineItemActivity struct {
	ItemNumber string `protobuf:"bytes,1,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	//delivered, returned, credited, invoiced, paid, ...
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	Quantity []byte `protobuf:"bytes,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// A centrifuge decimal bumber which is a 256bit(32 byte) integer and assume a precision of 18 behind the decimal point.
	// eg: 38447.3214 would be represented as 38447321400000000000000
	Amount []byte `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//depending on status delivery note, invoice, ...
	ReferenceDocumentId string `protobuf:"bytes,5,opt,name=reference_document_id,json=referenceDocumentId,proto3" json:"reference_document_id,omitempty"`
//line item from the reference document
	ReferenceDocumentItem string               `protobuf:"bytes,6,opt,name=reference_document_item,json=referenceDocumentItem,proto3" json:"reference_document_item,omitempty"`
	Date                  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *LineItemActivity) Reset()         { *m = LineItemActivity{} }
func (m *LineItemActivity) String() string { return proto.CompactTextString(m) }
func (*LineItemActivity) ProtoMessage()    {}
func (*LineItemActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cdaff5eff29fb6, []int{3}
}

func (m *LineItemActivity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LineItemActivity.Unmarshal(m, b)
}
func (m *LineItemActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LineItemActivity.Marshal(b, m, deterministic)
}
func (m *LineItemActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineItemActivity.Merge(m, src)
}
func (m *LineItemActivity) XXX_Size() int {
	return xxx_messageInfo_LineItemActivity.Size(m)
}
func (m *LineItemActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_LineItemActivity.DiscardUnknown(m)
}

var xxx_messageInfo_LineItemActivity proto.InternalMessageInfo

func (m *LineItemActivity) GetItemNumber() string {
	if m != nil {
		return m.ItemNumber
	}
	return ""
}

func (m *LineItemActivity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LineItemActivity) GetQuantity() []byte {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *LineItemActivity) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *LineItemActivity) GetReferenceDocumentId() string {
	if m != nil {
		return m.ReferenceDocumentId
	}
	return ""
}

func (m *LineItemActivity) GetReferenceDocumentItem() string {
	if m != nil {
		return m.ReferenceDocumentItem
	}
	return ""
}

func (m *LineItemActivity) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func init() {
	proto.RegisterType((*PurchaseOrderData)(nil), "purchaseorder.PurchaseOrderData")
	proto.RegisterType((*LineItem)(nil), "purchaseorder.LineItem")
	proto.RegisterType((*TaxItem)(nil), "purchaseorder.TaxItem")
	proto.RegisterType((*LineItemActivity)(nil), "purchaseorder.LineItemActivity")
}

func init() { proto.RegisterFile("purchaseorder/purchaseorder.proto", fileDescriptor_68cdaff5eff29fb6) }

var fileDescriptor_68cdaff5eff29fb6 = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0x85, 0xe2, 0x44, 0xb6, 0x46, 0x94, 0x64, 0x6d, 0x62, 0x6b, 0xa3, 0xf8, 0x83, 0x15, 0x7f,
	0x6d, 0xea, 0xa2, 0xad, 0x8c, 0x3a, 0x40, 0x0a, 0xa4, 0x2d, 0x02, 0xff, 0xf4, 0xc2, 0x40, 0xeb,
	0xa8, 0x8c, 0x73, 0x93, 0x1b, 0x62, 0x4d, 0x8e, 0xe3, 0x05, 0xc4, 0x9f, 0x2c, 0x97, 0x86, 0xd5,
	0x57, 0xe9, 0x0b, 0xf5, 0x11, 0xfa, 0x00, 0x7d, 0x90, 0x62, 0x76, 0x97, 0x14, 0x69, 0x37, 0x75,
	0x8b, 0x5e, 0xd9, 0x73, 0xe6, 0x9c, 0xe1, 0x8a, 0x3a, 0x73, 0x56, 0xf0, 0x34, 0x2b, 0x54, 0x78,
	0x29, 0x72, 0x4c, 0x55, 0x84, 0x6a, 0xaf, 0x51, 0x4d, 0x33, 0x95, 0xea, 0x94, 0xf5, 0x1a, 0xe0,
	0x78, 0x2b, 0x4c, 0xe3, 0x38, 0x4d, 0xf6, 0xa2, 0x34, 0x2c, 0x62, 0x4c, 0x74, 0x60, 0x6b, 0x4b,
	0x1e, 0x6f, 0xbf, 0x4f, 0xd3, 0xf7, 0x73, 0xdc, 0x33, 0xd5, 0x79, 0x71, 0xb1, 0xa7, 0x65, 0x8c,
	0xb9, 0x16, 0x71, 0x66, 0x09, 0x3b, 0xbf, 0x75, 0x60, 0x38, 0x73, 0x03, 0x5f, 0xd3, 0xc0, 0x63,
	0xa1, 0x05, 0xdb, 0x84, 0x76, 0xae, 0x85, 0x2e, 0x72, 0xde, 0x9a, 0xb4, 0x76, 0x3b, 0xbe, 0xab,
	0x08, 0x4f, 0x8a, 0xf8, 0x1c, 0x15, 0xbf, 0x67, 0x71, 0x5b, 0xb1, 0x67, 0x30, 0xc8, 0x31, 0x89,
	0x50, 0x05, 0xe6, 0x50, 0x81, 0x8c, 0xf8, 0x8a, 0x21, 0xf4, 0x2c, 0x6c, 0x26, 0x9f, 0x44, 0xec,
	0x4b, 0x60, 0x0a, 0x43, 0x99, 0x49, 0x3a, 0x68, 0x45, 0xbd, 0x6f, 0xa8, 0xeb, 0x55, 0xa7, 0x64,
	0x7f, 0x0a, 0x7d, 0x85, 0x1f, 0x0a, 0x99, 0x4b, 0x2d, 0xd3, 0x84, 0x98, 0x0f, 0xec, 0xd0, 0x1a,
	0xba, 0xa4, 0x61, 0xae, 0x51, 0x05, 0x89, 0x88, 0x91, 0xb7, 0x97, 0x34, 0x83, 0x9e, 0x8a, 0x18,
	0xd9, 0x67, 0x30, 0x58, 0xd2, 0x30, 0x16, 0x72, 0xce, 0x57, 0x0d, 0x6f, 0xa9, 0xfe, 0x81, 0x50,
	0xb6, 0x07, 0x8f, 0xf2, 0x4b, 0x99, 0x05, 0x3a, 0xa5, 0x77, 0x99, 0x89, 0x64, 0x61, 0xa7, 0xae,
	0x19, 0xf6, 0x90, 0x7a, 0x67, 0xe9, 0x91, 0xed, 0x98, 0xc9, 0xdf, 0xc1, 0x93, 0xa5, 0x20, 0xd1,
	0x22, 0xd4, 0x41, 0x86, 0x2a, 0x4f, 0x13, 0xab, 0xeb, 0x18, 0xdd, 0xa8, 0xd4, 0x19, 0xc2, 0xcc,
	0xf4, 0x8d, 0x9a, 0xde, 0x9d, 0x53, 0xe7, 0x5a, 0x21, 0xea, 0xaf, 0x39, 0xb8, 0x77, 0x67, 0x14,
	0x6f, 0x2c, 0x78, 0x9b, 0xb7, 0xcf, 0xbb, 0xb7, 0x79, 0xfb, 0x6c, 0x02, 0x5e, 0x75, 0x1a, 0xa9,
	0x17, 0xdc, 0x33, 0x24, 0x70, 0x8f, 0x97, 0x7a, 0x51, 0x9f, 0xf4, 0x8b, 0xcc, 0xc2, 0x34, 0x42,
	0xde, 0xab, 0x4f, 0x7a, 0x67, 0x41, 0xb6, 0x03, 0xbd, 0xe5, 0x13, 0x85, 0x46, 0xde, 0x37, 0xac,
	0x6e, 0xf9, 0x3c, 0xa1, 0x1b, 0xa7, 0x0f, 0xd3, 0x22, 0xd1, 0x6a, 0xc1, 0x07, 0xf5, 0x59, 0x47,
	0x16, 0x64, 0xff, 0x87, 0x5e, 0x26, 0x16, 0xc6, 0xa0, 0x1a, 0x55, 0x9c, 0xf3, 0x75, 0xc3, 0xf2,
	0x1c, 0x78, 0x46, 0x18, 0x1b, 0xc3, 0x5a, 0x58, 0x28, 0x85, 0x49, 0xb8, 0xe0, 0x43, 0xd3, 0xaf,
	0x6a, 0xf6, 0x14, 0x3c, 0x9d, 0x6a, 0x31, 0x0f, 0x44, 0x4c, 0x23, 0x39, 0x9b, 0xb4, 0x76, 0x3d,
	0xbf, 0x6b, 0xb0, 0x03, 0x03, 0xb1, 0x2d, 0xe8, 0x54, 0x1e, 0xe2, 0x0f, 0x4d, 0x7f, 0x09, 0x18,
	0x4f, 0x1b, 0x33, 0xf2, 0x47, 0xa6, 0xe5, 0x2a, 0xc6, 0x61, 0x95, 0x56, 0x86, 0x34, 0x1b, 0xe6,
	0x99, 0x65, 0xc9, 0xbe, 0x81, 0x4e, 0x24, 0x34, 0x06, 0x39, 0xf5, 0x36, 0x27, 0xad, 0xdd, 0xee,
	0xfe, 0x78, 0x6a, 0x17, 0x6a, 0x5a, 0x2e, 0xd4, 0xf4, 0xac, 0x5c, 0x28, 0x7f, 0x8d, 0xc8, 0x6f,
	0x48, 0x78, 0x00, 0x7d, 0x23, 0x0c, 0xd3, 0xe4, 0x42, 0xaa, 0x18, 0x23, 0x3e, 0xba, 0x53, 0xdd,
	0x23, 0xc5, 0x51, 0x29, 0x60, 0xdf, 0x83, 0x67, 0x46, 0x14, 0x19, 0xfd, 0x89, 0x38, 0xbf, 0x73,
	0x40, 0x97, 0x88, 0x6f, 0x2d, 0xbd, 0x92, 0x87, 0x0a, 0x8d, 0xfc, 0xf1, 0x3f, 0x93, 0x1f, 0x59,
	0x3a, 0x7b, 0x09, 0x5d, 0xa1, 0xb5, 0x08, 0x2f, 0xe9, 0x3d, 0xe4, 0x7c, 0x3c, 0x59, 0xd9, 0xed,
	0xee, 0xf3, 0xa9, 0x8b, 0x96, 0x43, 0x99, 0x08, 0xb5, 0x38, 0xa8, 0x08, 0x7e, 0x9d, 0xcc, 0x5e,
	0x00, 0xcc, 0x65, 0x82, 0x81, 0xd4, 0x18, 0xe7, 0xfc, 0x89, 0x91, 0x8e, 0xa6, 0xcd, 0x24, 0xfb,
	0x51, 0x26, 0x78, 0xa2, 0x31, 0xf6, 0x3b, 0x73, 0xf7, 0x5f, 0xce, 0x5e, 0xc1, 0xa0, 0x74, 0x48,
	0x84, 0x5a, 0xc8, 0x79, 0xce, 0xb7, 0x8c, 0x78, 0xb3, 0x7c, 0xee, 0xcc, 0xb6, 0x8f, 0x6d, 0xd7,
	0xef, 0x67, 0x8d, 0x7a, 0xe7, 0xf7, 0x07, 0xb0, 0x56, 0x0e, 0xfe, 0x68, 0x82, 0x6d, 0x43, 0x97,
	0x0e, 0x16, 0x34, 0x62, 0x0c, 0x08, 0x3a, 0xb5, 0x51, 0x36, 0x81, 0x6e, 0x84, 0x79, 0xa8, 0x64,
	0x46, 0xf1, 0xe2, 0x62, 0xac, 0x0e, 0x51, 0x90, 0x58, 0x0f, 0x06, 0x32, 0xb9, 0x4a, 0x65, 0x88,
	0x36, 0xc1, 0x3c, 0xbf, 0x6f, 0xe1, 0x13, 0x87, 0x92, 0x65, 0x1d, 0xd1, 0xb8, 0xd4, 0xa4, 0x97,
	0xe7, 0x77, 0x2d, 0x76, 0x46, 0x10, 0xfb, 0x8a, 0x02, 0x71, 0x19, 0x71, 0xee, 0x54, 0x36, 0xbf,
	0x86, 0xb5, 0x8e, 0x3b, 0xdc, 0xe7, 0xb0, 0xde, 0x48, 0x44, 0x8d, 0xb1, 0x0b, 0xb1, 0x41, 0x3d,
	0x13, 0xe9, 0x05, 0x8c, 0x60, 0x35, 0x13, 0x4a, 0x07, 0x49, 0xea, 0x82, 0xab, 0x4d, 0xe5, 0x69,
	0xca, 0x3e, 0x81, 0x7e, 0xa6, 0x64, 0x88, 0x94, 0x51, 0x41, 0x91, 0x48, 0x6d, 0x02, 0xca, 0xf3,
	0x3d, 0x83, 0xce, 0x50, 0xbd, 0x4d, 0xa4, 0xa6, 0xbd, 0xa6, 0x5e, 0x90, 0x5e, 0x04, 0x31, 0x8a,
	0xbc, 0x50, 0x68, 0x52, 0xc9, 0xf3, 0x7b, 0x04, 0xbf, 0xbe, 0xf8, 0xc9, 0x82, 0xb4, 0xb2, 0x1f,
	0x0a, 0x91, 0x68, 0x4a, 0x9a, 0xae, 0x21, 0x54, 0x35, 0xfb, 0x02, 0x86, 0x0a, 0x43, 0x94, 0x57,
	0x18, 0x05, 0x15, 0xc9, 0x33, 0xa4, 0xf5, 0xb2, 0xf1, 0x73, 0x49, 0xbe, 0x69, 0xf8, 0xde, 0x7f,
	0x33, 0x7c, 0xff, 0xdf, 0x19, 0xde, 0x5c, 0x0e, 0x57, 0x32, 0xaf, 0x7d, 0x09, 0x14, 0x63, 0x2b,
	0x74, 0x39, 0x58, 0xd8, 0x7d, 0x03, 0xaf, 0x00, 0x44, 0xa8, 0xe5, 0x95, 0xd4, 0x12, 0x29, 0xc4,
	0xc8, 0xa0, 0xdb, 0x1f, 0x71, 0xf7, 0x81, 0x25, 0x2e, 0xfc, 0x9a, 0x84, 0x3d, 0x87, 0x8e, 0x16,
	0xd7, 0x6e, 0x3b, 0x86, 0xce, 0xe0, 0x4d, 0xfd, 0x99, 0xb8, 0x36, 0xcb, 0xb1, 0xa6, 0xed, 0x3f,
	0xf9, 0xce, 0x1f, 0x2d, 0x58, 0x75, 0xe8, 0x4d, 0x07, 0xb7, 0x6e, 0x39, 0xf8, 0x5b, 0x18, 0x97,
	0xf3, 0xca, 0x3b, 0xf6, 0x96, 0xe3, 0x47, 0x59, 0xfd, 0xce, 0x3f, 0x59, 0x8a, 0xff, 0x07, 0x40,
	0xc7, 0x73, 0x21, 0xbb, 0x62, 0x43, 0x54, 0x8b, 0x6b, 0x17, 0xb1, 0x8f, 0x81, 0x0e, 0x15, 0x28,
	0xba, 0x0d, 0xac, 0xe9, 0x57, 0xb5, 0xb8, 0xf6, 0xe9, 0x26, 0x70, 0x2d, 0x73, 0x9d, 0x3c, 0xa8,
	0x5a, 0x47, 0x74, 0x91, 0x3c, 0x83, 0x01, 0xb5, 0xce, 0xe9, 0x44, 0x6e, 0x72, 0xdb, 0x9a, 0x49,
	0x8b, 0xeb, 0x43, 0x91, 0xa3, 0x9d, 0xbe, 0xf3, 0xeb, 0x3d, 0x58, 0xbf, 0xf9, 0xf2, 0xee, 0xfe,
	0xbc, 0xcb, 0x55, 0xbf, 0xd7, 0x58, 0xf5, 0xba, 0x35, 0x57, 0x6e, 0x58, 0x73, 0x13, 0xda, 0xee,
	0x20, 0xf6, 0x53, 0xb8, 0x8a, 0xed, 0xc3, 0x86, 0xc2, 0x0b, 0xa4, 0x2b, 0x07, 0x83, 0xea, 0x27,
	0x55, 0xf5, 0xcb, 0xe3, 0x61, 0xd5, 0x3c, 0x76, 0xbd, 0x93, 0x88, 0xbd, 0x80, 0xd1, 0x5f, 0x69,
	0x68, 0x37, 0xed, 0x22, 0x6f, 0xdc, 0x56, 0xd1, 0x17, 0x39, 0x85, 0xfb, 0x64, 0x41, 0xb3, 0xc0,
	0x7f, 0x6f, 0x55, 0xc3, 0x3b, 0x7c, 0x09, 0xc3, 0x30, 0x8d, 0x9b, 0x5e, 0x39, 0x64, 0xb3, 0x7a,
	0x39, 0x23, 0xed, 0xac, 0xf5, 0x6e, 0xd0, 0x20, 0x65, 0xe7, 0xe7, 0x6d, 0x33, 0xf5, 0xf9, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xad, 0xfa, 0xff, 0x60, 0x0a, 0x00, 0x00,
}
