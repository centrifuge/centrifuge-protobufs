// Code generated by protoc-gen-go. DO NOT EDIT.
// source: purchaseorder/purchaseorder.proto

package purchaseorderpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import coredocument "github.com/centrifuge/centrifuge-protobufs/gen/go/coredocument"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PurchaseOrderData is the default schema for a purchase order
type PurchaseOrderData struct {
	// purchase order number or reference number
	PoNumber string `protobuf:"bytes,1,opt,name=po_number,json=poNumber" json:"po_number,omitempty"`
	// name of the ordering company
	OrderName string `protobuf:"bytes,2,opt,name=order_name,json=orderName" json:"order_name,omitempty"`
	// street and address details of the ordering company
	OrderStreet  string `protobuf:"bytes,3,opt,name=order_street,json=orderStreet" json:"order_street,omitempty"`
	OrderCity    string `protobuf:"bytes,4,opt,name=order_city,json=orderCity" json:"order_city,omitempty"`
	OrderZipcode string `protobuf:"bytes,5,opt,name=order_zipcode,json=orderZipcode" json:"order_zipcode,omitempty"`
	// country ISO code of the ordering company of this purchase order
	OrderCountry string `protobuf:"bytes,6,opt,name=order_country,json=orderCountry" json:"order_country,omitempty"`
	// name of the recipient company
	RecipientName    string `protobuf:"bytes,7,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	RecipientStreet  string `protobuf:"bytes,8,opt,name=recipient_street,json=recipientStreet" json:"recipient_street,omitempty"`
	RecipientCity    string `protobuf:"bytes,9,opt,name=recipient_city,json=recipientCity" json:"recipient_city,omitempty"`
	RecipientZipcode string `protobuf:"bytes,10,opt,name=recipient_zipcode,json=recipientZipcode" json:"recipient_zipcode,omitempty"`
	// country ISO code of the receipient of this purchase order
	RecipientCountry string `protobuf:"bytes,11,opt,name=recipient_country,json=recipientCountry" json:"recipient_country,omitempty"`
	// ISO currency code
	Currency string `protobuf:"bytes,12,opt,name=currency" json:"currency,omitempty"`
	// ordering gross amount including tax
	OrderAmount int64 `protobuf:"varint,13,opt,name=order_amount,json=orderAmount" json:"order_amount,omitempty"`
	// invoice amount excluding tax
	NetAmount int64  `protobuf:"varint,14,opt,name=net_amount,json=netAmount" json:"net_amount,omitempty"`
	TaxAmount int64  `protobuf:"varint,15,opt,name=tax_amount,json=taxAmount" json:"tax_amount,omitempty"`
	TaxRate   int64  `protobuf:"varint,16,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	Recipient []byte `protobuf:"bytes,17,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Order     []byte `protobuf:"bytes,18,opt,name=order,proto3" json:"order,omitempty"`
	// contact or requester or purchaser at the ordering company
	OrderContact string `protobuf:"bytes,19,opt,name=order_contact,json=orderContact" json:"order_contact,omitempty"`
	Comment      string `protobuf:"bytes,20,opt,name=comment" json:"comment,omitempty"`
	// requested delivery date
	DeliveryDate *timestamp.Timestamp `protobuf:"bytes,21,opt,name=delivery_date,json=deliveryDate" json:"delivery_date,omitempty"`
	// purchase order date
	DateCreated *timestamp.Timestamp `protobuf:"bytes,22,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	ExtraData   []byte               `protobuf:"bytes,23,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// purchase order status
	PoStatus             string   `protobuf:"bytes,24,opt,name=po_status,json=poStatus" json:"po_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PurchaseOrderData) Reset()         { *m = PurchaseOrderData{} }
func (m *PurchaseOrderData) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderData) ProtoMessage()    {}
func (*PurchaseOrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_purchaseorder_9d42204dbd992bbf, []int{0}
}
func (m *PurchaseOrderData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurchaseOrderData.Unmarshal(m, b)
}
func (m *PurchaseOrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurchaseOrderData.Marshal(b, m, deterministic)
}
func (dst *PurchaseOrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderData.Merge(dst, src)
}
func (m *PurchaseOrderData) XXX_Size() int {
	return xxx_messageInfo_PurchaseOrderData.Size(m)
}
func (m *PurchaseOrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderData.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderData proto.InternalMessageInfo

func (m *PurchaseOrderData) GetPoNumber() string {
	if m != nil {
		return m.PoNumber
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderName() string {
	if m != nil {
		return m.OrderName
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderStreet() string {
	if m != nil {
		return m.OrderStreet
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderCity() string {
	if m != nil {
		return m.OrderCity
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderZipcode() string {
	if m != nil {
		return m.OrderZipcode
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderCountry() string {
	if m != nil {
		return m.OrderCountry
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientName() string {
	if m != nil {
		return m.RecipientName
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientStreet() string {
	if m != nil {
		return m.RecipientStreet
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientCity() string {
	if m != nil {
		return m.RecipientCity
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientZipcode() string {
	if m != nil {
		return m.RecipientZipcode
	}
	return ""
}

func (m *PurchaseOrderData) GetRecipientCountry() string {
	if m != nil {
		return m.RecipientCountry
	}
	return ""
}

func (m *PurchaseOrderData) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PurchaseOrderData) GetOrderAmount() int64 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *PurchaseOrderData) GetNetAmount() int64 {
	if m != nil {
		return m.NetAmount
	}
	return 0
}

func (m *PurchaseOrderData) GetTaxAmount() int64 {
	if m != nil {
		return m.TaxAmount
	}
	return 0
}

func (m *PurchaseOrderData) GetTaxRate() int64 {
	if m != nil {
		return m.TaxRate
	}
	return 0
}

func (m *PurchaseOrderData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *PurchaseOrderData) GetOrder() []byte {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PurchaseOrderData) GetOrderContact() string {
	if m != nil {
		return m.OrderContact
	}
	return ""
}

func (m *PurchaseOrderData) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *PurchaseOrderData) GetDeliveryDate() *timestamp.Timestamp {
	if m != nil {
		return m.DeliveryDate
	}
	return nil
}

func (m *PurchaseOrderData) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *PurchaseOrderData) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *PurchaseOrderData) GetPoStatus() string {
	if m != nil {
		return m.PoStatus
	}
	return ""
}

// PurhcaseOrderDataSalts keeps track of the salts used for each PurchaseOrderData field.
type PurchaseOrderDataSalts struct {
	PoNumber             []byte   `protobuf:"bytes,1,opt,name=po_number,json=poNumber,proto3" json:"po_number,omitempty"`
	OrderName            []byte   `protobuf:"bytes,2,opt,name=order_name,json=orderName,proto3" json:"order_name,omitempty"`
	OrderStreet          []byte   `protobuf:"bytes,3,opt,name=order_street,json=orderStreet,proto3" json:"order_street,omitempty"`
	OrderCity            []byte   `protobuf:"bytes,4,opt,name=order_city,json=orderCity,proto3" json:"order_city,omitempty"`
	OrderZipcode         []byte   `protobuf:"bytes,5,opt,name=order_zipcode,json=orderZipcode,proto3" json:"order_zipcode,omitempty"`
	OrderCountry         []byte   `protobuf:"bytes,6,opt,name=order_country,json=orderCountry,proto3" json:"order_country,omitempty"`
	RecipientName        []byte   `protobuf:"bytes,7,opt,name=recipient_name,json=recipientName,proto3" json:"recipient_name,omitempty"`
	RecipientStreet      []byte   `protobuf:"bytes,8,opt,name=recipient_street,json=recipientStreet,proto3" json:"recipient_street,omitempty"`
	RecipientCity        []byte   `protobuf:"bytes,9,opt,name=recipient_city,json=recipientCity,proto3" json:"recipient_city,omitempty"`
	RecipientZipcode     []byte   `protobuf:"bytes,10,opt,name=recipient_zipcode,json=recipientZipcode,proto3" json:"recipient_zipcode,omitempty"`
	RecipientCountry     []byte   `protobuf:"bytes,11,opt,name=recipient_country,json=recipientCountry,proto3" json:"recipient_country,omitempty"`
	Currency             []byte   `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	OrderAmount          []byte   `protobuf:"bytes,13,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	NetAmount            []byte   `protobuf:"bytes,14,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	TaxAmount            []byte   `protobuf:"bytes,15,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TaxRate              []byte   `protobuf:"bytes,16,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	Recipient            []byte   `protobuf:"bytes,17,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Order                []byte   `protobuf:"bytes,18,opt,name=order,proto3" json:"order,omitempty"`
	OrderContact         []byte   `protobuf:"bytes,19,opt,name=order_contact,json=orderContact,proto3" json:"order_contact,omitempty"`
	Comment              []byte   `protobuf:"bytes,20,opt,name=comment,proto3" json:"comment,omitempty"`
	DeliveryDate         []byte   `protobuf:"bytes,21,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	DateCreated          []byte   `protobuf:"bytes,22,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	ExtraData            []byte   `protobuf:"bytes,23,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	PoStatus             []byte   `protobuf:"bytes,24,opt,name=po_status,json=poStatus,proto3" json:"po_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PurchaseOrderDataSalts) Reset()         { *m = PurchaseOrderDataSalts{} }
func (m *PurchaseOrderDataSalts) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderDataSalts) ProtoMessage()    {}
func (*PurchaseOrderDataSalts) Descriptor() ([]byte, []int) {
	return fileDescriptor_purchaseorder_9d42204dbd992bbf, []int{1}
}
func (m *PurchaseOrderDataSalts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurchaseOrderDataSalts.Unmarshal(m, b)
}
func (m *PurchaseOrderDataSalts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurchaseOrderDataSalts.Marshal(b, m, deterministic)
}
func (dst *PurchaseOrderDataSalts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderDataSalts.Merge(dst, src)
}
func (m *PurchaseOrderDataSalts) XXX_Size() int {
	return xxx_messageInfo_PurchaseOrderDataSalts.Size(m)
}
func (m *PurchaseOrderDataSalts) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderDataSalts.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderDataSalts proto.InternalMessageInfo

func (m *PurchaseOrderDataSalts) GetPoNumber() []byte {
	if m != nil {
		return m.PoNumber
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderName() []byte {
	if m != nil {
		return m.OrderName
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderStreet() []byte {
	if m != nil {
		return m.OrderStreet
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderCity() []byte {
	if m != nil {
		return m.OrderCity
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderZipcode() []byte {
	if m != nil {
		return m.OrderZipcode
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderCountry() []byte {
	if m != nil {
		return m.OrderCountry
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipientName() []byte {
	if m != nil {
		return m.RecipientName
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipientStreet() []byte {
	if m != nil {
		return m.RecipientStreet
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipientCity() []byte {
	if m != nil {
		return m.RecipientCity
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipientZipcode() []byte {
	if m != nil {
		return m.RecipientZipcode
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipientCountry() []byte {
	if m != nil {
		return m.RecipientCountry
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetCurrency() []byte {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderAmount() []byte {
	if m != nil {
		return m.OrderAmount
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetNetAmount() []byte {
	if m != nil {
		return m.NetAmount
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrder() []byte {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetOrderContact() []byte {
	if m != nil {
		return m.OrderContact
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetComment() []byte {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetDeliveryDate() []byte {
	if m != nil {
		return m.DeliveryDate
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetDateCreated() []byte {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *PurchaseOrderDataSalts) GetPoStatus() []byte {
	if m != nil {
		return m.PoStatus
	}
	return nil
}

// PurchaseOrderDocument combines the salts, data & coredocument for a purchase order.
type PurchaseOrderDocument struct {
	CoreDocument         *coredocument.CoreDocument `protobuf:"bytes,1,opt,name=core_document,json=coreDocument" json:"core_document,omitempty"`
	Data                 *PurchaseOrderData         `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Salts                *PurchaseOrderDataSalts    `protobuf:"bytes,3,opt,name=salts" json:"salts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PurchaseOrderDocument) Reset()         { *m = PurchaseOrderDocument{} }
func (m *PurchaseOrderDocument) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderDocument) ProtoMessage()    {}
func (*PurchaseOrderDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_purchaseorder_9d42204dbd992bbf, []int{2}
}
func (m *PurchaseOrderDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurchaseOrderDocument.Unmarshal(m, b)
}
func (m *PurchaseOrderDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurchaseOrderDocument.Marshal(b, m, deterministic)
}
func (dst *PurchaseOrderDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderDocument.Merge(dst, src)
}
func (m *PurchaseOrderDocument) XXX_Size() int {
	return xxx_messageInfo_PurchaseOrderDocument.Size(m)
}
func (m *PurchaseOrderDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderDocument.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderDocument proto.InternalMessageInfo

func (m *PurchaseOrderDocument) GetCoreDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.CoreDocument
	}
	return nil
}

func (m *PurchaseOrderDocument) GetData() *PurchaseOrderData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PurchaseOrderDocument) GetSalts() *PurchaseOrderDataSalts {
	if m != nil {
		return m.Salts
	}
	return nil
}

func init() {
	proto.RegisterType((*PurchaseOrderData)(nil), "purchaseorder.PurchaseOrderData")
	proto.RegisterType((*PurchaseOrderDataSalts)(nil), "purchaseorder.PurchaseOrderDataSalts")
	proto.RegisterType((*PurchaseOrderDocument)(nil), "purchaseorder.PurchaseOrderDocument")
}

func init() {
	proto.RegisterFile("purchaseorder/purchaseorder.proto", fileDescriptor_purchaseorder_9d42204dbd992bbf)
}

var fileDescriptor_purchaseorder_9d42204dbd992bbf = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x95, 0xfe, 0x49, 0x13, 0x67, 0xd2, 0x36, 0xa6, 0x2d, 0x26, 0x80, 0x9a, 0xb6, 0xaa,
	0x14, 0x84, 0x94, 0x48, 0x85, 0x13, 0x08, 0x21, 0x9a, 0x9e, 0x4b, 0x94, 0x72, 0xea, 0x25, 0x72,
	0x1c, 0x53, 0x56, 0xea, 0xae, 0x57, 0x5e, 0x2f, 0x4a, 0x78, 0x3c, 0xae, 0x3c, 0x0f, 0x77, 0xe4,
	0x71, 0xdc, 0xdd, 0x6d, 0xab, 0x6c, 0x10, 0xe2, 0x38, 0xdf, 0x7c, 0x33, 0x3b, 0xf6, 0xfa, 0x67,
	0x93, 0xa3, 0x38, 0xd5, 0xe2, 0x1b, 0x4f, 0xa4, 0xd2, 0x53, 0xa9, 0xfb, 0x85, 0xa8, 0x17, 0x6b,
	0x65, 0x14, 0x6d, 0x16, 0xc4, 0xf6, 0xa1, 0x50, 0x5a, 0x4e, 0x95, 0x48, 0x43, 0x19, 0x99, 0x7e,
	0x3e, 0x70, 0xfe, 0xf6, 0xe1, 0x8d, 0x52, 0x37, 0xb7, 0xb2, 0x8f, 0xd1, 0x24, 0xfd, 0xda, 0x37,
	0x41, 0x28, 0x13, 0xc3, 0xc3, 0xd8, 0x19, 0x8e, 0x7f, 0x57, 0x49, 0x6b, 0xb8, 0xe8, 0xf9, 0xd9,
	0xf6, 0xbc, 0xe0, 0x86, 0xd3, 0xe7, 0xa4, 0x1e, 0xab, 0x71, 0x94, 0x86, 0x13, 0xa9, 0x59, 0xa5,
	0x53, 0xe9, 0xd6, 0x47, 0xb5, 0x58, 0x5d, 0x62, 0x4c, 0x5f, 0x12, 0x82, 0x5f, 0x1f, 0x47, 0x3c,
	0x94, 0x6c, 0x0d, 0xb3, 0x75, 0x54, 0x2e, 0x79, 0x28, 0xe9, 0x11, 0x01, 0x97, 0x4e, 0x8c, 0x96,
	0xd2, 0xb0, 0x75, 0x34, 0x34, 0x50, 0xbb, 0x42, 0x29, 0xeb, 0x20, 0x02, 0x33, 0x67, 0x1b, 0xb9,
	0x0e, 0x83, 0xc0, 0xcc, 0xe9, 0x09, 0x69, 0xba, 0xf4, 0x8f, 0x20, 0x16, 0x6a, 0x2a, 0xd9, 0x26,
	0x3a, 0x5c, 0xdb, 0x6b, 0xa7, 0x65, 0x26, 0xa1, 0xd2, 0xc8, 0xe8, 0x39, 0xab, 0xe6, 0x4c, 0x03,
	0xa7, 0xd1, 0x53, 0xb2, 0xad, 0xa5, 0x08, 0xe2, 0x40, 0x46, 0xc6, 0x8d, 0xbb, 0x85, 0xae, 0xe6,
	0x9d, 0x8a, 0x23, 0xbf, 0x22, 0xbb, 0x99, 0x6d, 0x31, 0x76, 0x0d, 0x8d, 0x3b, 0x77, 0xfa, 0x62,
	0xf4, 0x42, 0x47, 0x1c, 0xbf, 0x7e, 0xaf, 0x23, 0x2e, 0xe1, 0x35, 0x69, 0x65, 0x36, 0xbf, 0x0c,
	0x82, 0xce, 0xec, 0x53, 0x7e, 0x29, 0x05, 0xb3, 0x5f, 0x4e, 0xe3, 0x9e, 0xd9, 0x2f, 0xa9, 0x4d,
	0x6a, 0x22, 0xd5, 0x5a, 0x46, 0x62, 0xce, 0xc0, 0xfd, 0x19, 0x1f, 0x67, 0x5b, 0xcf, 0x43, 0xeb,
	0x66, 0xcd, 0x4e, 0xa5, 0xbb, 0xbe, 0xd8, 0xfa, 0x4f, 0x28, 0xd9, 0xad, 0x8f, 0xa4, 0xf1, 0x86,
	0x6d, 0x34, 0xd4, 0x23, 0x69, 0xb2, 0xb4, 0xe1, 0x33, 0x9f, 0xde, 0x71, 0x69, 0xc3, 0x67, 0x8b,
	0xf4, 0x33, 0x52, 0xb3, 0x69, 0xcd, 0x8d, 0x64, 0xbb, 0x98, 0xdc, 0x32, 0x7c, 0x36, 0xe2, 0x46,
	0xd2, 0x17, 0xa4, 0x7e, 0x37, 0x2b, 0x6b, 0x75, 0x2a, 0x5d, 0x18, 0x65, 0x02, 0xdd, 0x23, 0x9b,
	0x38, 0x05, 0xa3, 0x98, 0x71, 0x41, 0xfe, 0x1f, 0x46, 0x86, 0x0b, 0xc3, 0x9e, 0x14, 0xfe, 0x21,
	0x6a, 0x94, 0x91, 0x2d, 0xa1, 0x42, 0x7b, 0xa6, 0xd9, 0x1e, 0xa6, 0x7d, 0x48, 0x3f, 0x92, 0xe6,
	0x54, 0xde, 0x06, 0xdf, 0xa5, 0x9e, 0x8f, 0xa7, 0x76, 0xa4, 0xfd, 0x4e, 0xa5, 0xdb, 0x38, 0x6b,
	0xf7, 0xdc, 0xa1, 0xef, 0xf9, 0x43, 0xdf, 0xfb, 0xe2, 0x0f, 0xfd, 0x08, 0x7c, 0xc1, 0x85, 0x9d,
	0xf9, 0x03, 0x01, 0x5b, 0x37, 0x16, 0x5a, 0x72, 0x23, 0xa7, 0xec, 0xa0, 0xb4, 0xbe, 0x61, 0xfd,
	0x03, 0x67, 0xb7, 0x9b, 0x25, 0x67, 0x46, 0x73, 0xfb, 0x71, 0xce, 0x9e, 0xba, 0x35, 0xa3, 0x92,
	0x83, 0x28, 0x31, 0xdc, 0xa4, 0x09, 0x63, 0x1e, 0xa2, 0x2b, 0x8c, 0x8f, 0x7f, 0x56, 0xc9, 0xc1,
	0x03, 0xee, 0xae, 0xf8, 0xad, 0x49, 0x1e, 0xc2, 0x07, 0x4b, 0xe1, 0x83, 0x32, 0xf8, 0xa0, 0x0c,
	0x3e, 0x28, 0x85, 0x0f, 0x56, 0x81, 0x0f, 0x56, 0x82, 0x0f, 0x56, 0x85, 0x0f, 0x56, 0x85, 0x0f,
	0x56, 0x86, 0x0f, 0xfe, 0x06, 0x3e, 0x58, 0x01, 0x3e, 0x28, 0x81, 0x0f, 0xca, 0xe0, 0x83, 0xe5,
	0xf0, 0xc1, 0x32, 0xf8, 0xe0, 0x3f, 0xc0, 0x07, 0xcb, 0xe1, 0x83, 0x0c, 0xbe, 0x93, 0xc7, 0xe0,
	0x83, 0x7b, 0x80, 0x1d, 0x3d, 0x02, 0x18, 0xfc, 0x1b, 0x44, 0x90, 0x83, 0xe8, 0x57, 0x85, 0xec,
	0x17, 0x21, 0x5a, 0xbc, 0x7e, 0xf6, 0x6a, 0xb0, 0xaf, 0xe1, 0xd8, 0x3f, 0x87, 0xc8, 0x91, 0x45,
	0xbb, 0xf0, 0x46, 0x0e, 0x94, 0x96, 0xbe, 0x64, 0x04, 0x22, 0x17, 0xd1, 0xb7, 0x64, 0x03, 0x07,
	0x5a, 0xc3, 0xba, 0x4e, 0xaf, 0xf8, 0x18, 0x3f, 0x20, 0x77, 0x84, 0x6e, 0xfa, 0x9e, 0x6c, 0x26,
	0x96, 0x61, 0xe4, 0xae, 0x71, 0x76, 0x5a, 0x56, 0x86, 0xc0, 0x8f, 0x5c, 0xcd, 0xf9, 0x3b, 0xd2,
	0x12, 0x2a, 0x2c, 0x96, 0x9c, 0xd3, 0x61, 0x3e, 0x1c, 0xda, 0x1b, 0x69, 0x58, 0xb9, 0xde, 0x29,
	0x98, 0xe2, 0xc9, 0xa4, 0x8a, 0x77, 0xd5, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x96,
	0x06, 0xc5, 0x43, 0x08, 0x00, 0x00,
}
