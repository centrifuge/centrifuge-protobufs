// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coredocument/coredocument.proto

package coredocumentpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/centrifuge/precise-proofs/proofs/proto"
import any "github.com/golang/protobuf/ptypes/any"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// `CoreDocument` is a document that can be sent to different nodes and anchored
// on chain. It handles all the generic features native Centrifuge Documents support:
//
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
type CoreDocument struct {
	// # Identifiers
	// CoreDocument has two kinds of identifiers, the `document_identifier` is assigned
	// once per document and stays the same for the lifetime of the document.
	// document_identifier is the first ID ever used to anchor the document on chain and
	// is used internally to store all future versions. The `previous_version`, `current_version`, and the
	// `next_version` refer only to a particular version.
	//
	// 32 byte value
	DocumentIdentifier []byte `protobuf:"bytes,9,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	// previous_version refers to the previous state of the document.
	// 32 byte value
	PreviousVersion []byte `protobuf:"bytes,16,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	// current_version is the version used to refer to the current state of the document.
	// 32 byte value
	CurrentVersion []byte `protobuf:"bytes,3,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// next_version is the version that is going to be used for the next version if any
	// party wants to update the state.
	NextVersion []byte `protobuf:"bytes,4,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty"`
	// # Merkle roots
	// document_root the root of all roots. It's signature_root along with a list of all signatures
	DocumentRoot []byte `protobuf:"bytes,7,opt,name=document_root,json=documentRoot,proto3" json:"document_root,omitempty"`
	// signing_root is the Merkle root calculated from all fields on the document that need
	// to be signed. This is all fields except for the signatures themselves and the `document_root`.
	SigningRoot []byte `protobuf:"bytes,10,opt,name=signing_root,json=signingRoot,proto3" json:"signing_root,omitempty"`
	// previous_root is the `document_root` of the previous version of the document
	PreviousRoot []byte `protobuf:"bytes,2,opt,name=previous_root,json=previousRoot,proto3" json:"previous_root,omitempty"`
	// data_root is the Merkle root calculated for the `embedded_data` & `embedded_salts` document (such as an invoice).
	DataRoot []byte `protobuf:"bytes,5,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty"`
	// Signatures
	// Signatures of the signature_root by centrifuge identities. This array should be sorted by the Centrifuge ID.
	Signatures []*Signature `protobuf:"bytes,6,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Document a serialized document
	EmbeddedData      *any.Any `protobuf:"bytes,13,opt,name=embedded_data,json=embeddedData,proto3" json:"embedded_data,omitempty"`
	EmbeddedDataSalts *any.Any `protobuf:"bytes,14,opt,name=embedded_data_salts,json=embeddedDataSalts,proto3" json:"embedded_data_salts,omitempty"`
	// CoreDocumentSalts is inlined
	CoredocumentSalts *CoreDocumentSalts `protobuf:"bytes,15,opt,name=coredocument_salts,json=coredocumentSalts,proto3" json:"coredocument_salts,omitempty"`
	// Collaborators involved in the document consensus
	Collaborators        [][]byte `protobuf:"bytes,17,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreDocument) Reset()         { *m = CoreDocument{} }
func (m *CoreDocument) String() string { return proto.CompactTextString(m) }
func (*CoreDocument) ProtoMessage()    {}
func (*CoreDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_coredocument_61df393a317759d5, []int{0}
}
func (m *CoreDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreDocument.Unmarshal(m, b)
}
func (m *CoreDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreDocument.Marshal(b, m, deterministic)
}
func (dst *CoreDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreDocument.Merge(dst, src)
}
func (m *CoreDocument) XXX_Size() int {
	return xxx_messageInfo_CoreDocument.Size(m)
}
func (m *CoreDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreDocument.DiscardUnknown(m)
}

var xxx_messageInfo_CoreDocument proto.InternalMessageInfo

func (m *CoreDocument) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetPreviousVersion() []byte {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

func (m *CoreDocument) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *CoreDocument) GetNextVersion() []byte {
	if m != nil {
		return m.NextVersion
	}
	return nil
}

func (m *CoreDocument) GetDocumentRoot() []byte {
	if m != nil {
		return m.DocumentRoot
	}
	return nil
}

func (m *CoreDocument) GetSigningRoot() []byte {
	if m != nil {
		return m.SigningRoot
	}
	return nil
}

func (m *CoreDocument) GetPreviousRoot() []byte {
	if m != nil {
		return m.PreviousRoot
	}
	return nil
}

func (m *CoreDocument) GetDataRoot() []byte {
	if m != nil {
		return m.DataRoot
	}
	return nil
}

func (m *CoreDocument) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedData() *any.Any {
	if m != nil {
		return m.EmbeddedData
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedDataSalts() *any.Any {
	if m != nil {
		return m.EmbeddedDataSalts
	}
	return nil
}

func (m *CoreDocument) GetCoredocumentSalts() *CoreDocumentSalts {
	if m != nil {
		return m.CoredocumentSalts
	}
	return nil
}

func (m *CoreDocument) GetCollaborators() [][]byte {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

type CoreDocumentSalts struct {
	DocumentIdentifier   []byte   `protobuf:"bytes,9,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	PreviousVersion      []byte   `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	CurrentVersion       []byte   `protobuf:"bytes,3,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	NextVersion          []byte   `protobuf:"bytes,4,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty"`
	PreviousRoot         []byte   `protobuf:"bytes,2,opt,name=previous_root,json=previousRoot,proto3" json:"previous_root,omitempty"`
	DataRoot             []byte   `protobuf:"bytes,5,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty"`
	Collaborators        [][]byte `protobuf:"bytes,6,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	CollaboratorsLength  []byte   `protobuf:"bytes,7,opt,name=collaborators_length,json=collaboratorsLength,proto3" json:"collaborators_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreDocumentSalts) Reset()         { *m = CoreDocumentSalts{} }
func (m *CoreDocumentSalts) String() string { return proto.CompactTextString(m) }
func (*CoreDocumentSalts) ProtoMessage()    {}
func (*CoreDocumentSalts) Descriptor() ([]byte, []int) {
	return fileDescriptor_coredocument_61df393a317759d5, []int{1}
}
func (m *CoreDocumentSalts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreDocumentSalts.Unmarshal(m, b)
}
func (m *CoreDocumentSalts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreDocumentSalts.Marshal(b, m, deterministic)
}
func (dst *CoreDocumentSalts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreDocumentSalts.Merge(dst, src)
}
func (m *CoreDocumentSalts) XXX_Size() int {
	return xxx_messageInfo_CoreDocumentSalts.Size(m)
}
func (m *CoreDocumentSalts) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreDocumentSalts.DiscardUnknown(m)
}

var xxx_messageInfo_CoreDocumentSalts proto.InternalMessageInfo

func (m *CoreDocumentSalts) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *CoreDocumentSalts) GetPreviousVersion() []byte {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

func (m *CoreDocumentSalts) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *CoreDocumentSalts) GetNextVersion() []byte {
	if m != nil {
		return m.NextVersion
	}
	return nil
}

func (m *CoreDocumentSalts) GetPreviousRoot() []byte {
	if m != nil {
		return m.PreviousRoot
	}
	return nil
}

func (m *CoreDocumentSalts) GetDataRoot() []byte {
	if m != nil {
		return m.DataRoot
	}
	return nil
}

func (m *CoreDocumentSalts) GetCollaborators() [][]byte {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *CoreDocumentSalts) GetCollaboratorsLength() []byte {
	if m != nil {
		return m.CollaboratorsLength
	}
	return nil
}

// Signature contains the entity ID, public key used and signature)
type Signature struct {
	// `entity_id` is the CentrifugeID of the entity signing the document.
	EntityId []byte `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// `public_key` is the public key of the `entity` used for signing the `CoreDocument`
	PublicKey            []byte               `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature            []byte               `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_coredocument_61df393a317759d5, []int{2}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (dst *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(dst, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*CoreDocument)(nil), "coredocument.CoreDocument")
	proto.RegisterType((*CoreDocumentSalts)(nil), "coredocument.CoreDocumentSalts")
	proto.RegisterType((*Signature)(nil), "coredocument.Signature")
}

func init() {
	proto.RegisterFile("coredocument/coredocument.proto", fileDescriptor_coredocument_61df393a317759d5)
}

var fileDescriptor_coredocument_61df393a317759d5 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0xe5, 0xe6, 0x9f, 0xfc, 0xeb, 0x1b, 0xe7, 0x6b, 0x52, 0x09, 0x13, 0x40, 0x09, 0x01,
	0xa9, 0xa1, 0x12, 0x89, 0x08, 0x0b, 0x58, 0x21, 0x08, 0xdd, 0x54, 0x65, 0x51, 0xb9, 0xc0, 0x82,
	0x8d, 0xe5, 0x8f, 0x49, 0x18, 0xe1, 0x78, 0xac, 0xf1, 0xb8, 0xc2, 0x4f, 0x03, 0xcb, 0xbe, 0x06,
	0x2f, 0xc1, 0x9b, 0xb0, 0x47, 0x9e, 0xf1, 0x38, 0xe3, 0xa6, 0x12, 0x1b, 0x58, 0x55, 0x73, 0xce,
	0x6f, 0x4e, 0xef, 0xdc, 0x9c, 0x04, 0xc6, 0x01, 0x65, 0x38, 0xa4, 0x41, 0xb6, 0xc5, 0x31, 0x5f,
	0xe8, 0x87, 0x79, 0xc2, 0x28, 0xa7, 0xc8, 0xd2, 0xb5, 0xd1, 0xdd, 0x0d, 0xa5, 0x9b, 0x08, 0x2f,
	0x84, 0xe7, 0x67, 0xeb, 0x85, 0x17, 0xe7, 0x12, 0x1c, 0x8d, 0x6f, 0x5a, 0x9c, 0x6c, 0x71, 0xca,
	0xbd, 0x6d, 0x52, 0x02, 0xc7, 0x09, 0xc3, 0x01, 0x49, 0xf1, 0xd3, 0x84, 0x51, 0xba, 0x4e, 0x17,
	0xbb, 0x3f, 0x9c, 0xca, 0x83, 0x04, 0xa7, 0xd7, 0x4d, 0xb0, 0xde, 0x52, 0x86, 0x4f, 0xcb, 0xff,
	0x8a, 0x16, 0x30, 0x54, 0x13, 0xb8, 0x24, 0xc4, 0x31, 0x27, 0x6b, 0x82, 0x99, 0x6d, 0x4e, 0x8c,
	0x99, 0xe5, 0x20, 0x65, 0x9d, 0x55, 0x0e, 0x7a, 0x02, 0xfd, 0x84, 0xe1, 0x2b, 0x42, 0xb3, 0xd4,
	0xbd, 0xc2, 0x2c, 0x25, 0x34, 0xb6, 0xfb, 0x82, 0xee, 0x29, 0xfd, 0xa3, 0x94, 0xd1, 0x31, 0xf4,
	0x82, 0x8c, 0xb1, 0x22, 0x5a, 0x91, 0x0d, 0x41, 0x76, 0x4b, 0x59, 0x81, 0x0f, 0xc1, 0x8a, 0xf1,
	0xd7, 0x1d, 0xf5, 0x9f, 0xa0, 0xda, 0x85, 0xa6, 0x90, 0x13, 0xe8, 0x54, 0x73, 0x32, 0x4a, 0xb9,
	0xfd, 0x7f, 0xc1, 0xac, 0x9a, 0xdf, 0x7f, 0xfc, 0x02, 0xc3, 0xb1, 0x94, 0xe7, 0x50, 0xca, 0xd1,
	0x0c, 0xac, 0x94, 0x6c, 0x62, 0x12, 0x6f, 0x24, 0x0a, 0x3a, 0xda, 0x2e, 0x2d, 0x41, 0x9e, 0x40,
	0xa7, 0x7a, 0x8c, 0x40, 0x0f, 0x24, 0x7a, 0x2d, 0x53, 0x95, 0x27, 0xd8, 0x29, 0x98, 0xa1, 0xc7,
	0x3d, 0xc9, 0x35, 0x75, 0xee, 0xb0, 0xd0, 0x05, 0xf3, 0x0a, 0xa0, 0x88, 0xf7, 0x78, 0xc6, 0x70,
	0x6a, 0xb7, 0x26, 0x8d, 0x59, 0x7b, 0x79, 0x67, 0x5e, 0xfb, 0xe8, 0x2f, 0x95, 0xaf, 0x06, 0xd2,
	0x6e, 0xa0, 0xd7, 0xd0, 0xc1, 0x5b, 0x1f, 0x87, 0x21, 0x0e, 0xdd, 0x22, 0xd4, 0xee, 0x4c, 0x8c,
	0x59, 0x7b, 0x79, 0x34, 0x97, 0x05, 0x98, 0xab, 0x02, 0xcc, 0xdf, 0xc4, 0x79, 0xf5, 0x76, 0x75,
	0xe3, 0xd4, 0xe3, 0x1e, 0x3a, 0x87, 0x61, 0x2d, 0xc1, 0x4d, 0xbd, 0x88, 0xa7, 0x76, 0xf7, 0xcf,
	0x39, 0x03, 0x3d, 0xe7, 0xb2, 0xb8, 0x85, 0x3e, 0x00, 0xd2, 0x67, 0x2f, 0xb3, 0x7a, 0x22, 0x6b,
	0x5c, 0x7f, 0x96, 0x5e, 0x2a, 0x71, 0xb9, 0x8a, 0xd5, 0x31, 0x19, 0xfb, 0x18, 0x3a, 0x01, 0x8d,
	0x22, 0xcf, 0xa7, 0xcc, 0xe3, 0x94, 0xa5, 0xf6, 0x60, 0xd2, 0x98, 0x59, 0x4e, 0x5d, 0x9c, 0xfe,
	0x3c, 0x80, 0xc1, 0x5e, 0xea, 0xdf, 0xe9, 0xab, 0xf1, 0xef, 0xfb, 0xfa, 0xe8, 0xd6, 0x66, 0xdd,
	0xa8, 0xd4, 0xbd, 0xbd, 0x4a, 0x69, 0x5d, 0xda, 0xdb, 0x52, 0xeb, 0x96, 0x2d, 0xa1, 0x67, 0x70,
	0x54, 0x13, 0xdc, 0x08, 0xc7, 0x1b, 0xfe, 0x59, 0x7e, 0x3d, 0x9c, 0x61, 0xcd, 0x7b, 0x27, 0xac,
	0xe9, 0x37, 0x03, 0xcc, 0xaa, 0x85, 0xc5, 0x0c, 0xc5, 0xae, 0x78, 0xee, 0x92, 0xb0, 0x5c, 0xcc,
	0xa1, 0x14, 0xce, 0x42, 0xf4, 0x00, 0x20, 0xc9, 0xfc, 0x88, 0x04, 0xee, 0x17, 0x9c, 0x97, 0x4f,
	0x30, 0xa5, 0x72, 0x8e, 0x73, 0x74, 0x1f, 0xcc, 0xaa, 0xbc, 0xe5, 0xaa, 0x76, 0x02, 0x7a, 0x09,
	0x66, 0xf5, 0x3b, 0x25, 0x56, 0xd4, 0x5e, 0x8e, 0xf6, 0x0a, 0xf8, 0x5e, 0x11, 0xce, 0x0e, 0x5e,
	0xbd, 0x80, 0x7e, 0x40, 0xb7, 0xb5, 0x82, 0xad, 0x44, 0x17, 0xd4, 0xe9, 0xa2, 0xb8, 0x7e, 0x61,
	0x7c, 0xea, 0xea, 0x48, 0xe2, 0xfb, 0x2d, 0x91, 0xfb, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0xb6, 0xd2, 0x00, 0x7b, 0x05, 0x00, 0x00,
}
