// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: coredocument/coredocument.proto

package coredocumentpb

import (
	proto "github.com/centrifuge/precise-proofs/proofs/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action defines the set of actions a collaborator can/have per document.
type Action int32

const (
	Action_ACTION_INVALID Action = 0
	// read_sign represents reading as well the sign the documents. We will pick this one when requesting the signatures.
	Action_ACTION_READ_SIGN Action = 1
	// read represents just reading the doc/fields
	Action_ACTION_READ Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_INVALID",
		1: "ACTION_READ_SIGN",
		2: "ACTION_READ",
	}
	Action_value = map[string]int32{
		"ACTION_INVALID":   0,
		"ACTION_READ_SIGN": 1,
		"ACTION_READ":      2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_coredocument_coredocument_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_coredocument_coredocument_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{0}
}

type FieldMatchType int32

const (
	FieldMatchType_FIELD_MATCH_TYPE_INVALID FieldMatchType = 0
	FieldMatchType_FIELD_MATCH_TYPE_PREFIX  FieldMatchType = 1
	FieldMatchType_FIELD_MATCH_TYPE_EXACT   FieldMatchType = 2
)

// Enum value maps for FieldMatchType.
var (
	FieldMatchType_name = map[int32]string{
		0: "FIELD_MATCH_TYPE_INVALID",
		1: "FIELD_MATCH_TYPE_PREFIX",
		2: "FIELD_MATCH_TYPE_EXACT",
	}
	FieldMatchType_value = map[string]int32{
		"FIELD_MATCH_TYPE_INVALID": 0,
		"FIELD_MATCH_TYPE_PREFIX":  1,
		"FIELD_MATCH_TYPE_EXACT":   2,
	}
)

func (x FieldMatchType) Enum() *FieldMatchType {
	p := new(FieldMatchType)
	*p = x
	return p
}

func (x FieldMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_coredocument_coredocument_proto_enumTypes[1].Descriptor()
}

func (FieldMatchType) Type() protoreflect.EnumType {
	return &file_coredocument_coredocument_proto_enumTypes[1]
}

func (x FieldMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldMatchType.Descriptor instead.
func (FieldMatchType) EnumDescriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{1}
}

type TransitionAction int32

const (
	TransitionAction_TRANSITION_ACTION_INVALID TransitionAction = 0
	TransitionAction_TRANSITION_ACTION_EDIT    TransitionAction = 1
	TransitionAction_TRANSITION_ACTION_COMPUTE TransitionAction = 2
)

// Enum value maps for TransitionAction.
var (
	TransitionAction_name = map[int32]string{
		0: "TRANSITION_ACTION_INVALID",
		1: "TRANSITION_ACTION_EDIT",
		2: "TRANSITION_ACTION_COMPUTE",
	}
	TransitionAction_value = map[string]int32{
		"TRANSITION_ACTION_INVALID": 0,
		"TRANSITION_ACTION_EDIT":    1,
		"TRANSITION_ACTION_COMPUTE": 2,
	}
)

func (x TransitionAction) Enum() *TransitionAction {
	p := new(TransitionAction)
	*p = x
	return p
}

func (x TransitionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransitionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_coredocument_coredocument_proto_enumTypes[2].Descriptor()
}

func (TransitionAction) Type() protoreflect.EnumType {
	return &file_coredocument_coredocument_proto_enumTypes[2]
}

func (x TransitionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransitionAction.Descriptor instead.
func (TransitionAction) EnumDescriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{2}
}

// AttributeType defines the allowed attribute types.
type AttributeType int32

const (
	AttributeType_ATTRIBUTE_TYPE_INVALID   AttributeType = 0
	AttributeType_ATTRIBUTE_TYPE_INTEGER   AttributeType = 1
	AttributeType_ATTRIBUTE_TYPE_DECIMAL   AttributeType = 2
	AttributeType_ATTRIBUTE_TYPE_STRING    AttributeType = 3
	AttributeType_ATTRIBUTE_TYPE_BYTES     AttributeType = 4
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP AttributeType = 5
	AttributeType_ATTRIBUTE_TYPE_SIGNED    AttributeType = 6
	AttributeType_ATTRIBUTE_TYPE_MONETARY  AttributeType = 7
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "ATTRIBUTE_TYPE_INVALID",
		1: "ATTRIBUTE_TYPE_INTEGER",
		2: "ATTRIBUTE_TYPE_DECIMAL",
		3: "ATTRIBUTE_TYPE_STRING",
		4: "ATTRIBUTE_TYPE_BYTES",
		5: "ATTRIBUTE_TYPE_TIMESTAMP",
		6: "ATTRIBUTE_TYPE_SIGNED",
		7: "ATTRIBUTE_TYPE_MONETARY",
	}
	AttributeType_value = map[string]int32{
		"ATTRIBUTE_TYPE_INVALID":   0,
		"ATTRIBUTE_TYPE_INTEGER":   1,
		"ATTRIBUTE_TYPE_DECIMAL":   2,
		"ATTRIBUTE_TYPE_STRING":    3,
		"ATTRIBUTE_TYPE_BYTES":     4,
		"ATTRIBUTE_TYPE_TIMESTAMP": 5,
		"ATTRIBUTE_TYPE_SIGNED":    6,
		"ATTRIBUTE_TYPE_MONETARY":  7,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_coredocument_coredocument_proto_enumTypes[3].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_coredocument_coredocument_proto_enumTypes[3]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{3}
}

// `CoreDocument` is a document that can be sent to different nodes and anchored
// on chain. It handles all the generic features native Centrifuge Documents support:
//
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
type CoreDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// # Identifiers
	// CoreDocument has two kinds of identifiers, the `document_identifier` is assigned
	// once per document and stays the same for the lifetime of the document.
	// document_identifier is the first ID ever used to anchor the document on chain and
	// is used internally to store all future versions. The `previous_version`, `current_version`, and the
	// `next_version` refer only to a particular version.
	//
	// 32 byte value
	DocumentIdentifier []byte `protobuf:"bytes,9,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	// previous_version refers to the previous state of the document.
	// 32 byte value
	PreviousVersion []byte `protobuf:"bytes,16,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	// current_version is the version used to refer to the current state of the document.
	// 32 byte value
	CurrentVersion []byte `protobuf:"bytes,3,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// current_preimage is the sha256 pre-image of the current_version. It prevents current state commitment id(anchor id) from getting exposed.
	// 32 byte value
	CurrentPreimage []byte `protobuf:"bytes,23,opt,name=current_preimage,json=currentPreimage,proto3" json:"current_preimage,omitempty"`
	// next_version is the version that is going to be used for the next version if any
	// party wants to update the state.
	NextVersion []byte `protobuf:"bytes,4,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty"`
	// next_preimage is the sha256 pre-image of the next_version. It prevents next state commitment id(anchor id) from getting exposed.
	NextPreimage []byte `protobuf:"bytes,22,opt,name=next_preimage,json=nextPreimage,proto3" json:"next_preimage,omitempty"`
	// Signatures of the signature_root by collaborators on the document.
	SignatureData *SignatureData `protobuf:"bytes,6,opt,name=signature_data,json=signatureData,proto3" json:"signature_data,omitempty"`
	// When a document is transmitted over the wire, the type specific fields (e.g. InvoiceData) are
	// embedded in the document using the google.protobuf.Any type.
	EmbeddedData *anypb.Any    `protobuf:"bytes,13,opt,name=embedded_data,json=embeddedData,proto3" json:"embedded_data,omitempty"`
	Salts        []*proto.Salt `protobuf:"bytes,15,rep,name=salts,proto3" json:"salts,omitempty"`
	// list of roles
	Roles []*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	// read_rules define who may read a document and who should sign it
	ReadRules []*ReadRule `protobuf:"bytes,19,rep,name=read_rules,json=readRules,proto3" json:"read_rules,omitempty"`
	// transition rules define how a document may be manipulated
	TransitionRules []*TransitionRule `protobuf:"bytes,24,rep,name=transition_rules,json=transitionRules,proto3" json:"transition_rules,omitempty"`
	// nft list for uniqueness check
	Nfts []*NFT `protobuf:"bytes,20,rep,name=nfts,proto3" json:"nfts,omitempty"`
	// AccessTokens which have been added to this CoreDocument
	AccessTokens []*AccessToken `protobuf:"bytes,21,rep,name=access_tokens,json=accessTokens,proto3" json:"access_tokens,omitempty"`
	// author of the latest update
	Author []byte `protobuf:"bytes,25,opt,name=author,proto3" json:"author,omitempty"`
	// timestamp of the latest update
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// anchor repository address used to anchor this document
	AnchorRepositoryUsed []byte `protobuf:"bytes,27,opt,name=anchor_repository_used,json=anchorRepositoryUsed,proto3" json:"anchor_repository_used,omitempty"`
	// custom attributes(user defined fields) for this document
	Attributes []*Attribute `protobuf:"bytes,28,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *CoreDocument) Reset() {
	*x = CoreDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreDocument) ProtoMessage() {}

func (x *CoreDocument) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreDocument.ProtoReflect.Descriptor instead.
func (*CoreDocument) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{0}
}

func (x *CoreDocument) GetDocumentIdentifier() []byte {
	if x != nil {
		return x.DocumentIdentifier
	}
	return nil
}

func (x *CoreDocument) GetPreviousVersion() []byte {
	if x != nil {
		return x.PreviousVersion
	}
	return nil
}

func (x *CoreDocument) GetCurrentVersion() []byte {
	if x != nil {
		return x.CurrentVersion
	}
	return nil
}

func (x *CoreDocument) GetCurrentPreimage() []byte {
	if x != nil {
		return x.CurrentPreimage
	}
	return nil
}

func (x *CoreDocument) GetNextVersion() []byte {
	if x != nil {
		return x.NextVersion
	}
	return nil
}

func (x *CoreDocument) GetNextPreimage() []byte {
	if x != nil {
		return x.NextPreimage
	}
	return nil
}

func (x *CoreDocument) GetSignatureData() *SignatureData {
	if x != nil {
		return x.SignatureData
	}
	return nil
}

func (x *CoreDocument) GetEmbeddedData() *anypb.Any {
	if x != nil {
		return x.EmbeddedData
	}
	return nil
}

func (x *CoreDocument) GetSalts() []*proto.Salt {
	if x != nil {
		return x.Salts
	}
	return nil
}

func (x *CoreDocument) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *CoreDocument) GetReadRules() []*ReadRule {
	if x != nil {
		return x.ReadRules
	}
	return nil
}

func (x *CoreDocument) GetTransitionRules() []*TransitionRule {
	if x != nil {
		return x.TransitionRules
	}
	return nil
}

func (x *CoreDocument) GetNfts() []*NFT {
	if x != nil {
		return x.Nfts
	}
	return nil
}

func (x *CoreDocument) GetAccessTokens() []*AccessToken {
	if x != nil {
		return x.AccessTokens
	}
	return nil
}

func (x *CoreDocument) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CoreDocument) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CoreDocument) GetAnchorRepositoryUsed() []byte {
	if x != nil {
		return x.AnchorRepositoryUsed
	}
	return nil
}

func (x *CoreDocument) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// TransitionRulesFingerprint is used to create the 'fingerprint' hash for verifying if the Transition Rules and Roles
// of a CoreDocument have changed
type TransitionRulesFingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of roles
	Roles []*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	// transition rules define how a document may be manipulated
	TransitionRules []*TransitionRule `protobuf:"bytes,3,rep,name=transition_rules,json=transitionRules,proto3" json:"transition_rules,omitempty"`
}

func (x *TransitionRulesFingerprint) Reset() {
	*x = TransitionRulesFingerprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionRulesFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionRulesFingerprint) ProtoMessage() {}

func (x *TransitionRulesFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionRulesFingerprint.ProtoReflect.Descriptor instead.
func (*TransitionRulesFingerprint) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{1}
}

func (x *TransitionRulesFingerprint) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *TransitionRulesFingerprint) GetTransitionRules() []*TransitionRule {
	if x != nil {
		return x.TransitionRules
	}
	return nil
}

type AccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier is an internal 256bit word
	Identifier []byte `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The identity granting access to the document
	Granter []byte `protobuf:"bytes,3,opt,name=granter,proto3" json:"granter,omitempty"`
	// The identity being granted access to the document
	Grantee []byte `protobuf:"bytes,4,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// Role identifier is the identifier on the read rule that this token should be mapped to
	RoleIdentifier []byte `protobuf:"bytes,5,opt,name=role_identifier,json=roleIdentifier,proto3" json:"role_identifier,omitempty"`
	// Original identifier of the document
	DocumentIdentifier []byte `protobuf:"bytes,2,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	// Cryptographic signature that an access token is valid
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	// The public key of the signed message
	Key []byte `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	// The document version refers to a version of the document this token is embedded in. Its timestamp
	// will be used to verify the validity of the signature of the access token.
	DocumentVersion []byte `protobuf:"bytes,8,opt,name=document_version,json=documentVersion,proto3" json:"document_version,omitempty"`
}

func (x *AccessToken) Reset() {
	*x = AccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessToken) ProtoMessage() {}

func (x *AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessToken.ProtoReflect.Descriptor instead.
func (*AccessToken) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{2}
}

func (x *AccessToken) GetIdentifier() []byte {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AccessToken) GetGranter() []byte {
	if x != nil {
		return x.Granter
	}
	return nil
}

func (x *AccessToken) GetGrantee() []byte {
	if x != nil {
		return x.Grantee
	}
	return nil
}

func (x *AccessToken) GetRoleIdentifier() []byte {
	if x != nil {
		return x.RoleIdentifier
	}
	return nil
}

func (x *AccessToken) GetDocumentIdentifier() []byte {
	if x != nil {
		return x.DocumentIdentifier
	}
	return nil
}

func (x *AccessToken) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AccessToken) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AccessToken) GetDocumentVersion() []byte {
	if x != nil {
		return x.DocumentVersion
	}
	return nil
}

// SignatureData contains the list of signatures identified by the signature_id
type SignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignatureData) Reset() {
	*x = SignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureData) ProtoMessage() {}

func (x *SignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureData.ProtoReflect.Descriptor instead.
func (*SignatureData) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{3}
}

func (x *SignatureData) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Signature contains the entity ID, public key used and signature)
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `signature_id` is a composed key signer_id+public_key (20+32) used
	SignatureId []byte `protobuf:"bytes,1,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	// `signer_id` is the CentrifugeID of the identity signing the document.
	SignerId []byte `protobuf:"bytes,2,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	// `public_key` is the public key of the `signer` used for signing the `CoreDocument`
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// `signature` is the actual signature of the CoreDocument
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// `transition_validated` defines if node was able to validate transition rules from document version A -> B
	TransitionValidated bool `protobuf:"varint,5,opt,name=transition_validated,json=transitionValidated,proto3" json:"transition_validated,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{4}
}

func (x *Signature) GetSignatureId() []byte {
	if x != nil {
		return x.SignatureId
	}
	return nil
}

func (x *Signature) GetSignerId() []byte {
	if x != nil {
		return x.SignerId
	}
	return nil
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetTransitionValidated() bool {
	if x != nil {
		return x.TransitionValidated
	}
	return false
}

// Roles holds a list of collaborators, NFTs, and/or access tokens.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// role key which is used to identify the group internally and map the role to rules
	RoleKey []byte `protobuf:"bytes,1,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
	// collaborators holds the list of document collaborators
	Collaborators [][]byte `protobuf:"bytes,3,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// nfts is a list of collection and item ID pairs.
	// For easier verification in merkle proofs, the values are simply concatenated with the first 8 bytes
	// being the NFT encoded collection ID and the remaining 16 bytes the encoded item ID.
	Nfts [][]byte `protobuf:"bytes,4,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{5}
}

func (x *Role) GetRoleKey() []byte {
	if x != nil {
		return x.RoleKey
	}
	return nil
}

func (x *Role) GetCollaborators() [][]byte {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *Role) GetNfts() [][]byte {
	if x != nil {
		return x.Nfts
	}
	return nil
}

type ReadRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles  [][]byte `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	Action Action   `protobuf:"varint,4,opt,name=action,proto3,enum=coredocument.Action" json:"action,omitempty"`
}

func (x *ReadRule) Reset() {
	*x = ReadRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRule) ProtoMessage() {}

func (x *ReadRule) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRule.ProtoReflect.Descriptor instead.
func (*ReadRule) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{6}
}

func (x *ReadRule) GetRoles() [][]byte {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ReadRule) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_INVALID
}

type TransitionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rule key, to help track of the rule
	RuleKey []byte `protobuf:"bytes,1,opt,name=rule_key,json=ruleKey,proto3" json:"rule_key,omitempty"`
	// Indicates which roles can make changes or read the fields specified:
	// this list holds role keys correlated to those in the 'roles' field of the CoreDocument
	Roles [][]byte `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// prefix or exact
	MatchType FieldMatchType `protobuf:"varint,3,opt,name=match_type,json=matchType,proto3,enum=coredocument.FieldMatchType" json:"match_type,omitempty"`
	// compact property of the field
	Field []byte `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	// what kind of action this rule allows
	Action TransitionAction `protobuf:"varint,5,opt,name=action,proto3,enum=coredocument.TransitionAction" json:"action,omitempty"`
	// compute_fields holds the list of attribute fields that will be passed to WASM
	ComputeFields [][]byte `protobuf:"bytes,6,rep,name=compute_fields,json=computeFields,proto3" json:"compute_fields,omitempty"`
	// compute_target_field is the attribute label that will hold the result of the WASM execution
	ComputeTargetField []byte `protobuf:"bytes,7,opt,name=compute_target_field,json=computeTargetField,proto3" json:"compute_target_field,omitempty"`
	// compute_code is the WASM binary that will be executed
	ComputeCode []byte `protobuf:"bytes,8,opt,name=compute_code,json=computeCode,proto3" json:"compute_code,omitempty"`
}

func (x *TransitionRule) Reset() {
	*x = TransitionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionRule) ProtoMessage() {}

func (x *TransitionRule) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionRule.ProtoReflect.Descriptor instead.
func (*TransitionRule) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{7}
}

func (x *TransitionRule) GetRuleKey() []byte {
	if x != nil {
		return x.RuleKey
	}
	return nil
}

func (x *TransitionRule) GetRoles() [][]byte {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *TransitionRule) GetMatchType() FieldMatchType {
	if x != nil {
		return x.MatchType
	}
	return FieldMatchType_FIELD_MATCH_TYPE_INVALID
}

func (x *TransitionRule) GetField() []byte {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *TransitionRule) GetAction() TransitionAction {
	if x != nil {
		return x.Action
	}
	return TransitionAction_TRANSITION_ACTION_INVALID
}

func (x *TransitionRule) GetComputeFields() [][]byte {
	if x != nil {
		return x.ComputeFields
	}
	return nil
}

func (x *TransitionRule) GetComputeTargetField() []byte {
	if x != nil {
		return x.ComputeTargetField
	}
	return nil
}

func (x *TransitionRule) GetComputeCode() []byte {
	if x != nil {
		return x.ComputeCode
	}
	return nil
}

type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId []byte `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ItemId       []byte `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{8}
}

func (x *NFT) GetCollectionId() []byte {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

func (x *NFT) GetItemId() []byte {
	if x != nil {
		return x.ItemId
	}
	return nil
}

// Attribute represents a custom attribute
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyLabel []byte        `protobuf:"bytes,2,opt,name=key_label,json=keyLabel,proto3" json:"key_label,omitempty"`
	Type     AttributeType `protobuf:"varint,3,opt,name=type,proto3,enum=coredocument.AttributeType" json:"type,omitempty"`
	// Types that are assignable to Value:
	//	*Attribute_StrVal
	//	*Attribute_ByteVal
	//	*Attribute_TimeVal
	//	*Attribute_SignedVal
	//	*Attribute_MonetaryVal
	Value isAttribute_Value `protobuf_oneof:"value"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{9}
}

func (x *Attribute) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Attribute) GetKeyLabel() []byte {
	if x != nil {
		return x.KeyLabel
	}
	return nil
}

func (x *Attribute) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_ATTRIBUTE_TYPE_INVALID
}

func (m *Attribute) GetValue() isAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Attribute) GetStrVal() string {
	if x, ok := x.GetValue().(*Attribute_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *Attribute) GetByteVal() []byte {
	if x, ok := x.GetValue().(*Attribute_ByteVal); ok {
		return x.ByteVal
	}
	return nil
}

func (x *Attribute) GetTimeVal() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*Attribute_TimeVal); ok {
		return x.TimeVal
	}
	return nil
}

func (x *Attribute) GetSignedVal() *Signed {
	if x, ok := x.GetValue().(*Attribute_SignedVal); ok {
		return x.SignedVal
	}
	return nil
}

func (x *Attribute) GetMonetaryVal() *Monetary {
	if x, ok := x.GetValue().(*Attribute_MonetaryVal); ok {
		return x.MonetaryVal
	}
	return nil
}

type isAttribute_Value interface {
	isAttribute_Value()
}

type Attribute_StrVal struct {
	StrVal string `protobuf:"bytes,4,opt,name=str_val,json=strVal,proto3,oneof"`
}

type Attribute_ByteVal struct {
	ByteVal []byte `protobuf:"bytes,5,opt,name=byte_val,json=byteVal,proto3,oneof"`
}

type Attribute_TimeVal struct {
	TimeVal *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time_val,json=timeVal,proto3,oneof"`
}

type Attribute_SignedVal struct {
	SignedVal *Signed `protobuf:"bytes,7,opt,name=signed_val,json=signedVal,proto3,oneof"`
}

type Attribute_MonetaryVal struct {
	MonetaryVal *Monetary `protobuf:"bytes,8,opt,name=monetary_val,json=monetaryVal,proto3,oneof"`
}

func (*Attribute_StrVal) isAttribute_Value() {}

func (*Attribute_ByteVal) isAttribute_Value() {}

func (*Attribute_TimeVal) isAttribute_Value() {}

func (*Attribute_SignedVal) isAttribute_Value() {}

func (*Attribute_MonetaryVal) isAttribute_Value() {}

// Signed holds the custom attribute signature type
type Signed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocVersion []byte        `protobuf:"bytes,1,opt,name=doc_version,json=docVersion,proto3" json:"doc_version,omitempty"`
	Type       AttributeType `protobuf:"varint,6,opt,name=type,proto3,enum=coredocument.AttributeType" json:"type,omitempty"`
	Value      []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Identity   []byte        `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// signature = sign(identity + doc_id(taken from the document.document_identifier) + doc_version + value)
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *Signed) Reset() {
	*x = Signed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signed) ProtoMessage() {}

func (x *Signed) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signed.ProtoReflect.Descriptor instead.
func (*Signed) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{10}
}

func (x *Signed) GetDocVersion() []byte {
	if x != nil {
		return x.DocVersion
	}
	return nil
}

func (x *Signed) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_ATTRIBUTE_TYPE_INVALID
}

func (x *Signed) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Signed) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Signed) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signed) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Monetary holds decimal value, id, type and chain context
type Monetary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`   // fixed 1 byte
	Chain []byte `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"` // fixed 4 bytes
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // fixed 32 bytes
	Id    []byte `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`       // fixed 32 bytes
}

func (x *Monetary) Reset() {
	*x = Monetary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coredocument_coredocument_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monetary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monetary) ProtoMessage() {}

func (x *Monetary) ProtoReflect() protoreflect.Message {
	mi := &file_coredocument_coredocument_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monetary.ProtoReflect.Descriptor instead.
func (*Monetary) Descriptor() ([]byte, []int) {
	return file_coredocument_coredocument_proto_rawDescGZIP(), []int{11}
}

func (x *Monetary) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Monetary) GetChain() []byte {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *Monetary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Monetary) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

var File_coredocument_coredocument_proto protoreflect.FileDescriptor

var file_coredocument_coredocument_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x08, 0x0a,
	0x0c, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a,
	0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a,
	0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52,
	0x0c, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x05, 0xa0, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x05, 0xa0, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0c, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x61,
	0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x12, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xba, 0xc1, 0xf5, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x04,
	0x6e, 0x66, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x42, 0x12, 0xba,
	0xc1, 0xf5, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x52, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x14, 0xb0, 0xc1, 0xf5, 0x0a, 0x20,
	0xba, 0xc1, 0xf5, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0,
	0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x14, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x42, 0x0d, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xba, 0xc1, 0xf5, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1a,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x17, 0xb0,
	0xc1, 0xf5, 0x0a, 0x20, 0xba, 0xc1, 0xf5, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x05, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xd8, 0x02,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x13, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x41, 0xc8, 0xc1, 0xf5,
	0x0a, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a,
	0x20, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x1b, 0xc0, 0xc1, 0xf5, 0x0a, 0x01, 0xb0, 0xc1, 0xf5,
	0x0a, 0x40, 0xba, 0xc1, 0xf5, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xdc, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x05, 0xa0, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xa0, 0xc1, 0xf5, 0x0a,
	0x01, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x05, 0xa0, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0, 0xc1, 0xf5, 0x0a, 0x41, 0xc8, 0xc1, 0xf5, 0x0a, 0x01,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x70,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x42,
	0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x18, 0x52, 0x04, 0x6e, 0x66, 0x74, 0x73,
	0x22, 0x55, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5,
	0x0a, 0x20, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1,
	0xf5, 0x0a, 0x20, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5,
	0x0a, 0x20, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x51, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05,
	0xb0, 0xc1, 0xf5, 0x0a, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x10, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05,
	0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x12, 0x37, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x42, 0x05,
	0xc0, 0xc1, 0xf5, 0x0a, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xea, 0x01,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0,
	0xc1, 0xf5, 0x0a, 0x20, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xb0,
	0xc1, 0xf5, 0x0a, 0x41, 0xc8, 0xc1, 0xf5, 0x0a, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xb0, 0xc1, 0xf5, 0x0a, 0x20, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x08, 0x4d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x43, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x0e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x41,
	0x43, 0x54, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x10, 0x02, 0x2a, 0xee, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x52,
	0x59, 0x10, 0x07, 0x42, 0x76, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x43, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x66,
	0x75, 0x67, 0x65, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x66, 0x75, 0x67, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_coredocument_coredocument_proto_rawDescOnce sync.Once
	file_coredocument_coredocument_proto_rawDescData = file_coredocument_coredocument_proto_rawDesc
)

func file_coredocument_coredocument_proto_rawDescGZIP() []byte {
	file_coredocument_coredocument_proto_rawDescOnce.Do(func() {
		file_coredocument_coredocument_proto_rawDescData = protoimpl.X.CompressGZIP(file_coredocument_coredocument_proto_rawDescData)
	})
	return file_coredocument_coredocument_proto_rawDescData
}

var file_coredocument_coredocument_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_coredocument_coredocument_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_coredocument_coredocument_proto_goTypes = []interface{}{
	(Action)(0),                        // 0: coredocument.Action
	(FieldMatchType)(0),                // 1: coredocument.FieldMatchType
	(TransitionAction)(0),              // 2: coredocument.TransitionAction
	(AttributeType)(0),                 // 3: coredocument.AttributeType
	(*CoreDocument)(nil),               // 4: coredocument.CoreDocument
	(*TransitionRulesFingerprint)(nil), // 5: coredocument.TransitionRulesFingerprint
	(*AccessToken)(nil),                // 6: coredocument.AccessToken
	(*SignatureData)(nil),              // 7: coredocument.SignatureData
	(*Signature)(nil),                  // 8: coredocument.Signature
	(*Role)(nil),                       // 9: coredocument.Role
	(*ReadRule)(nil),                   // 10: coredocument.ReadRule
	(*TransitionRule)(nil),             // 11: coredocument.TransitionRule
	(*NFT)(nil),                        // 12: coredocument.NFT
	(*Attribute)(nil),                  // 13: coredocument.Attribute
	(*Signed)(nil),                     // 14: coredocument.Signed
	(*Monetary)(nil),                   // 15: coredocument.Monetary
	(*anypb.Any)(nil),                  // 16: google.protobuf.Any
	(*proto.Salt)(nil),                 // 17: proofs.Salt
	(*timestamppb.Timestamp)(nil),      // 18: google.protobuf.Timestamp
}
var file_coredocument_coredocument_proto_depIdxs = []int32{
	7,  // 0: coredocument.CoreDocument.signature_data:type_name -> coredocument.SignatureData
	16, // 1: coredocument.CoreDocument.embedded_data:type_name -> google.protobuf.Any
	17, // 2: coredocument.CoreDocument.salts:type_name -> proofs.Salt
	9,  // 3: coredocument.CoreDocument.roles:type_name -> coredocument.Role
	10, // 4: coredocument.CoreDocument.read_rules:type_name -> coredocument.ReadRule
	11, // 5: coredocument.CoreDocument.transition_rules:type_name -> coredocument.TransitionRule
	12, // 6: coredocument.CoreDocument.nfts:type_name -> coredocument.NFT
	6,  // 7: coredocument.CoreDocument.access_tokens:type_name -> coredocument.AccessToken
	18, // 8: coredocument.CoreDocument.timestamp:type_name -> google.protobuf.Timestamp
	13, // 9: coredocument.CoreDocument.attributes:type_name -> coredocument.Attribute
	9,  // 10: coredocument.TransitionRulesFingerprint.roles:type_name -> coredocument.Role
	11, // 11: coredocument.TransitionRulesFingerprint.transition_rules:type_name -> coredocument.TransitionRule
	8,  // 12: coredocument.SignatureData.signatures:type_name -> coredocument.Signature
	0,  // 13: coredocument.ReadRule.action:type_name -> coredocument.Action
	1,  // 14: coredocument.TransitionRule.match_type:type_name -> coredocument.FieldMatchType
	2,  // 15: coredocument.TransitionRule.action:type_name -> coredocument.TransitionAction
	3,  // 16: coredocument.Attribute.type:type_name -> coredocument.AttributeType
	18, // 17: coredocument.Attribute.time_val:type_name -> google.protobuf.Timestamp
	14, // 18: coredocument.Attribute.signed_val:type_name -> coredocument.Signed
	15, // 19: coredocument.Attribute.monetary_val:type_name -> coredocument.Monetary
	3,  // 20: coredocument.Signed.type:type_name -> coredocument.AttributeType
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_coredocument_coredocument_proto_init() }
func file_coredocument_coredocument_proto_init() {
	if File_coredocument_coredocument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coredocument_coredocument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionRulesFingerprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coredocument_coredocument_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monetary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coredocument_coredocument_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Attribute_StrVal)(nil),
		(*Attribute_ByteVal)(nil),
		(*Attribute_TimeVal)(nil),
		(*Attribute_SignedVal)(nil),
		(*Attribute_MonetaryVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coredocument_coredocument_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coredocument_coredocument_proto_goTypes,
		DependencyIndexes: file_coredocument_coredocument_proto_depIdxs,
		EnumInfos:         file_coredocument_coredocument_proto_enumTypes,
		MessageInfos:      file_coredocument_coredocument_proto_msgTypes,
	}.Build()
	File_coredocument_coredocument_proto = out.File
	file_coredocument_coredocument_proto_rawDesc = nil
	file_coredocument_coredocument_proto_goTypes = nil
	file_coredocument_coredocument_proto_depIdxs = nil
}
