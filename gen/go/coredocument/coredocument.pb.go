// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coredocument/coredocument.proto

package coredocumentpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// `CoreDocument` is a document that can be sent to different nodes and anchored
// on chain. It handles all the generic features native Centrifuge Documents support:
//
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
type CoreDocument struct {
	// This is for convenience: the first identifier that was ever used to refer to a
	// document is kept here. Internally the centrifuge node indexes & bundles documents
	// by original identifier.
	//
	// 32 byte value
	DocumentIdentifier []byte `protobuf:"bytes,9,opt,name=document_identifier,json=documentIdentifier,proto3" json:"document_identifier,omitempty"`
	// The current identifier is the location of the current anchor on chain and is used to
	// refer to the current state.
	//
	// 32 byte value
	CurrentIdentifier []byte `protobuf:"bytes,3,opt,name=current_identifier,json=currentIdentifier,proto3" json:"current_identifier,omitempty"`
	// When creating the next version this should be used.
	NextIdentifier []byte `protobuf:"bytes,4,opt,name=next_identifier,json=nextIdentifier,proto3" json:"next_identifier,omitempty"`
	// Root
	PreviousRoot   []byte `protobuf:"bytes,2,opt,name=previous_root,json=previousRoot,proto3" json:"previous_root,omitempty"`
	DataMerkleRoot []byte `protobuf:"bytes,5,opt,name=data_merkle_root,json=dataMerkleRoot,proto3" json:"data_merkle_root,omitempty"`
	DocumentRoot   []byte `protobuf:"bytes,7,opt,name=document_root,json=documentRoot,proto3" json:"document_root,omitempty"`
	// Signatures
	Signatures []*Signature `protobuf:"bytes,6,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// The previous document is referenced here but doesn't need to be provided and can
	// be left blank
	//
	// This is a readonly field
	PreviousVersions []*CoreDocument `protobuf:"bytes,8,rep,name=previous_versions,json=previousVersions,proto3" json:"previous_versions,omitempty"`
	// Document a serialized document
	EmbeddedData         *any.Any `protobuf:"bytes,13,opt,name=embedded_data,json=embeddedData,proto3" json:"embedded_data,omitempty"`
	EmbeddedDataSalts    *any.Any `protobuf:"bytes,14,opt,name=embedded_data_salts,json=embeddedDataSalts,proto3" json:"embedded_data_salts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreDocument) Reset()         { *m = CoreDocument{} }
func (m *CoreDocument) String() string { return proto.CompactTextString(m) }
func (*CoreDocument) ProtoMessage()    {}
func (*CoreDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_coredocument_0504eda5eec5841d, []int{0}
}
func (m *CoreDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreDocument.Unmarshal(m, b)
}
func (m *CoreDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreDocument.Marshal(b, m, deterministic)
}
func (dst *CoreDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreDocument.Merge(dst, src)
}
func (m *CoreDocument) XXX_Size() int {
	return xxx_messageInfo_CoreDocument.Size(m)
}
func (m *CoreDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreDocument.DiscardUnknown(m)
}

var xxx_messageInfo_CoreDocument proto.InternalMessageInfo

func (m *CoreDocument) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetCurrentIdentifier() []byte {
	if m != nil {
		return m.CurrentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetNextIdentifier() []byte {
	if m != nil {
		return m.NextIdentifier
	}
	return nil
}

func (m *CoreDocument) GetPreviousRoot() []byte {
	if m != nil {
		return m.PreviousRoot
	}
	return nil
}

func (m *CoreDocument) GetDataMerkleRoot() []byte {
	if m != nil {
		return m.DataMerkleRoot
	}
	return nil
}

func (m *CoreDocument) GetDocumentRoot() []byte {
	if m != nil {
		return m.DocumentRoot
	}
	return nil
}

func (m *CoreDocument) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *CoreDocument) GetPreviousVersions() []*CoreDocument {
	if m != nil {
		return m.PreviousVersions
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedData() *any.Any {
	if m != nil {
		return m.EmbeddedData
	}
	return nil
}

func (m *CoreDocument) GetEmbeddedDataSalts() *any.Any {
	if m != nil {
		return m.EmbeddedDataSalts
	}
	return nil
}

// Signature contains the entity ID, public key used and signature)
type Signature struct {
	// `entity_id` is the CentrifugeID of the entity signing the document.
	EntityId []byte `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// `public_key` is the public key of the `entity` used for signing the `CoreDocument`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_coredocument_0504eda5eec5841d, []int{1}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (dst *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(dst, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*CoreDocument)(nil), "coredocument.CoreDocument")
	proto.RegisterType((*Signature)(nil), "coredocument.Signature")
}

func init() {
	proto.RegisterFile("coredocument/coredocument.proto", fileDescriptor_coredocument_0504eda5eec5841d)
}

var fileDescriptor_coredocument_0504eda5eec5841d = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0xef, 0x93, 0x40,
	0x10, 0xc5, 0x53, 0xff, 0xb5, 0x96, 0x29, 0xd4, 0x76, 0x6b, 0x22, 0x56, 0x8d, 0x4d, 0x7b, 0x90,
	0x8b, 0x90, 0xd4, 0x83, 0xf1, 0xa8, 0x36, 0x31, 0x8d, 0xf1, 0x42, 0x13, 0x0f, 0x5e, 0x08, 0xb0,
	0xd3, 0x66, 0x53, 0xca, 0x92, 0x65, 0x69, 0xe4, 0x4b, 0xf8, 0x99, 0x0d, 0x0b, 0x8b, 0x8b, 0x07,
	0x8f, 0xbc, 0xf7, 0x7b, 0x93, 0x9d, 0x37, 0xc0, 0x9b, 0x94, 0x0b, 0xa4, 0x3c, 0xad, 0x6e, 0x98,
	0xcb, 0xc0, 0xfc, 0xf0, 0x0b, 0xc1, 0x25, 0x27, 0xb6, 0xa9, 0xad, 0x5f, 0x5c, 0x38, 0xbf, 0x64,
	0x18, 0x28, 0x2f, 0xa9, 0xce, 0x41, 0x9c, 0xd7, 0x2d, 0xb8, 0xfd, 0x3d, 0x06, 0xfb, 0x0b, 0x17,
	0x78, 0xe8, 0x58, 0x12, 0xc0, 0x4a, 0xe7, 0x22, 0x46, 0x31, 0x97, 0xec, 0xcc, 0x50, 0xb8, 0xd6,
	0x66, 0xe4, 0xd9, 0x21, 0xd1, 0xd6, 0xb1, 0x77, 0xc8, 0x3b, 0x20, 0x69, 0x25, 0xc4, 0x3f, 0xfc,
	0x83, 0xe2, 0x97, 0x9d, 0x63, 0xe0, 0x6f, 0xe1, 0x69, 0x8e, 0xbf, 0x06, 0xec, 0x58, 0xb1, 0xf3,
	0x46, 0x36, 0xc0, 0x1d, 0x38, 0x85, 0xc0, 0x3b, 0xe3, 0x55, 0x19, 0x09, 0xce, 0xa5, 0xfb, 0x48,
	0x61, 0xb6, 0x16, 0x43, 0xce, 0x25, 0xf1, 0x60, 0x41, 0x63, 0x19, 0x47, 0x37, 0x14, 0xd7, 0x0c,
	0x5b, 0xee, 0x71, 0x3b, 0xae, 0xd1, 0xbf, 0x2b, 0x59, 0x91, 0x3b, 0x70, 0xfa, 0xbd, 0x14, 0xf6,
	0xa4, 0x1d, 0xa7, 0x45, 0x05, 0x7d, 0x00, 0x28, 0xd9, 0x25, 0x8f, 0x65, 0x25, 0xb0, 0x74, 0x27,
	0x9b, 0x07, 0x6f, 0xb6, 0x7f, 0xee, 0x0f, 0xfa, 0x3d, 0x69, 0x3f, 0x34, 0x50, 0xf2, 0x15, 0x96,
	0xfd, 0x63, 0xef, 0x28, 0x4a, 0xc6, 0xf3, 0xd2, 0x9d, 0xaa, 0xfc, 0x7a, 0x98, 0x37, 0xcb, 0x0e,
	0x17, 0x3a, 0xf4, 0xa3, 0xcb, 0x90, 0x8f, 0xe0, 0xe0, 0x2d, 0x41, 0x4a, 0x91, 0x46, 0xcd, 0x06,
	0xae, 0xb3, 0x19, 0x79, 0xb3, 0xfd, 0x33, 0xbf, 0x3d, 0xa1, 0xaf, 0x4f, 0xe8, 0x7f, 0xca, 0xeb,
	0xd0, 0xd6, 0xe8, 0x21, 0x96, 0x31, 0x39, 0xc0, 0x6a, 0x10, 0x8d, 0xca, 0x38, 0x93, 0xa5, 0x3b,
	0xff, 0xcf, 0x80, 0xa5, 0x39, 0xe0, 0xd4, 0xe0, 0x5b, 0x04, 0xab, 0x5f, 0x91, 0xbc, 0x04, 0xab,
	0xb9, 0x87, 0xac, 0x23, 0x46, 0xdd, 0x91, 0x2a, 0x6c, 0xda, 0x0a, 0x47, 0x4a, 0x5e, 0x03, 0x14,
	0x55, 0x92, 0xb1, 0x34, 0xba, 0x62, 0xdd, 0x5d, 0xc7, 0x6a, 0x95, 0x6f, 0x58, 0x93, 0x57, 0x60,
	0xf5, 0x05, 0x75, 0xbf, 0xc3, 0x5f, 0xe1, 0xf3, 0xe2, 0xe7, 0xdc, 0xac, 0xa5, 0x48, 0x92, 0x89,
	0x7a, 0xd9, 0xfb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x82, 0xd6, 0x9f, 0xdc, 0x02, 0x00,
	0x00,
}
