// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coredocument/service.proto

package coredocumentpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// P2PMessage wraps a single CoreDocument to be transferred to another noed
type P2PMessage struct {
	Document             *CoreDocument `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *P2PMessage) Reset()         { *m = P2PMessage{} }
func (m *P2PMessage) String() string { return proto.CompactTextString(m) }
func (*P2PMessage) ProtoMessage()    {}
func (*P2PMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_d05cdeeceb592fd9, []int{0}
}
func (m *P2PMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessage.Unmarshal(m, b)
}
func (m *P2PMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessage.Marshal(b, m, deterministic)
}
func (dst *P2PMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessage.Merge(dst, src)
}
func (m *P2PMessage) XXX_Size() int {
	return xxx_messageInfo_P2PMessage.Size(m)
}
func (m *P2PMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessage.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessage proto.InternalMessageInfo

func (m *P2PMessage) GetDocument() *CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

type P2PReply struct {
	Document             *CoreDocument `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *P2PReply) Reset()         { *m = P2PReply{} }
func (m *P2PReply) String() string { return proto.CompactTextString(m) }
func (*P2PReply) ProtoMessage()    {}
func (*P2PReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_d05cdeeceb592fd9, []int{1}
}
func (m *P2PReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PReply.Unmarshal(m, b)
}
func (m *P2PReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PReply.Marshal(b, m, deterministic)
}
func (dst *P2PReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PReply.Merge(dst, src)
}
func (m *P2PReply) XXX_Size() int {
	return xxx_messageInfo_P2PReply.Size(m)
}
func (m *P2PReply) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PReply.DiscardUnknown(m)
}

var xxx_messageInfo_P2PReply proto.InternalMessageInfo

func (m *P2PReply) GetDocument() *CoreDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PMessage)(nil), "coredocument.P2PMessage")
	proto.RegisterType((*P2PReply)(nil), "coredocument.P2PReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P2PService service

type P2PServiceClient interface {
	Post(ctx context.Context, in *P2PMessage, opts ...grpc.CallOption) (*P2PReply, error)
}

type p2PServiceClient struct {
	cc *grpc.ClientConn
}

func NewP2PServiceClient(cc *grpc.ClientConn) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) Post(ctx context.Context, in *P2PMessage, opts ...grpc.CallOption) (*P2PReply, error) {
	out := new(P2PReply)
	err := grpc.Invoke(ctx, "/coredocument.P2PService/Post", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P2PService service

type P2PServiceServer interface {
	Post(context.Context, *P2PMessage) (*P2PReply, error)
}

func RegisterP2PServiceServer(s *grpc.Server, srv P2PServiceServer) {
	s.RegisterService(&_P2PService_serviceDesc, srv)
}

func _P2PService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coredocument.P2PService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).Post(ctx, req.(*P2PMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2PService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coredocument.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _P2PService_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coredocument/service.proto",
}

func init() { proto.RegisterFile("coredocument/service.proto", fileDescriptor_service_d05cdeeceb592fd9) }

var fileDescriptor_service_d05cdeeceb592fd9 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0xce, 0x2f, 0x4a,
	0x4d, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x41, 0x96, 0x93, 0x92, 0x47, 0x51, 0x89, 0xcc,
	0x81, 0x28, 0x57, 0x72, 0xe1, 0xe2, 0x0a, 0x30, 0x0a, 0xf0, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f,
	0x15, 0x32, 0xe3, 0xe2, 0x80, 0xc9, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xe9, 0xa1,
	0x68, 0x72, 0xce, 0x2f, 0x4a, 0x75, 0x81, 0x72, 0x82, 0xe0, 0x6a, 0x95, 0x9c, 0xb8, 0x38, 0x02,
	0x8c, 0x02, 0x82, 0x52, 0x0b, 0x72, 0x2a, 0xc9, 0x35, 0xc3, 0xc8, 0x03, 0xec, 0x92, 0x60, 0x88,
	0x67, 0x84, 0xac, 0xb8, 0x58, 0x02, 0xf2, 0x8b, 0x4b, 0x84, 0x24, 0x50, 0xf5, 0x22, 0xdc, 0x2a,
	0x25, 0x86, 0x21, 0x03, 0xb6, 0x5f, 0x89, 0xc1, 0x49, 0x20, 0x8a, 0x0f, 0x59, 0xaa, 0x20, 0x29,
	0x89, 0x0d, 0xec, 0x59, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xfc, 0xa0, 0x7d, 0x39,
	0x01, 0x00, 0x00,
}
