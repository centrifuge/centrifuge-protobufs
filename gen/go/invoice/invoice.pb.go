// Code generated by protoc-gen-go. DO NOT EDIT.
// source: invoice/invoice.proto

package invoicepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import coredocument "github.com/centrifuge/centrifuge-protobufs/gen/go/coredocument"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// InvoiceData is the default invoice schema
type InvoiceData struct {
	// invoice number or reference number
	InvoiceNumber string `protobuf:"bytes,1,opt,name=invoice_number,json=invoiceNumber" json:"invoice_number,omitempty"`
	// name of the sender company
	SenderName string `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	// street and address details of the sender company
	SenderStreet  string `protobuf:"bytes,4,opt,name=sender_street,json=senderStreet" json:"sender_street,omitempty"`
	SenderCity    string `protobuf:"bytes,5,opt,name=sender_city,json=senderCity" json:"sender_city,omitempty"`
	SenderZipcode string `protobuf:"bytes,6,opt,name=sender_zipcode,json=senderZipcode" json:"sender_zipcode,omitempty"`
	// country ISO code of the sender of this invoice
	SenderCountry string `protobuf:"bytes,7,opt,name=sender_country,json=senderCountry" json:"sender_country,omitempty"`
	// name of the recipient company
	RecipientName    string `protobuf:"bytes,8,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	RecipientStreet  string `protobuf:"bytes,9,opt,name=recipient_street,json=recipientStreet" json:"recipient_street,omitempty"`
	RecipientCity    string `protobuf:"bytes,10,opt,name=recipient_city,json=recipientCity" json:"recipient_city,omitempty"`
	RecipientZipcode string `protobuf:"bytes,11,opt,name=recipient_zipcode,json=recipientZipcode" json:"recipient_zipcode,omitempty"`
	// country ISO code of the receipient of this invoice
	RecipientCountry string `protobuf:"bytes,12,opt,name=recipient_country,json=recipientCountry" json:"recipient_country,omitempty"`
	// ISO currency code
	Currency string `protobuf:"bytes,13,opt,name=currency" json:"currency,omitempty"`
	// invoice amount including tax
	GrossAmount int64 `protobuf:"varint,14,opt,name=gross_amount,json=grossAmount" json:"gross_amount,omitempty"`
	// invoice amount excluding tax
	NetAmount            int64                `protobuf:"varint,15,opt,name=net_amount,json=netAmount" json:"net_amount,omitempty"`
	TaxAmount            int64                `protobuf:"varint,16,opt,name=tax_amount,json=taxAmount" json:"tax_amount,omitempty"`
	TaxRate              int64                `protobuf:"varint,17,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	Recipient            []byte               `protobuf:"bytes,18,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender               []byte               `protobuf:"bytes,19,opt,name=sender,proto3" json:"sender,omitempty"`
	Payee                []byte               `protobuf:"bytes,20,opt,name=payee,proto3" json:"payee,omitempty"`
	Comment              string               `protobuf:"bytes,21,opt,name=comment" json:"comment,omitempty"`
	DueDate              *timestamp.Timestamp `protobuf:"bytes,22,opt,name=due_date,json=dueDate" json:"due_date,omitempty"`
	DateCreated          *timestamp.Timestamp `protobuf:"bytes,23,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	ExtraData            []byte               `protobuf:"bytes,24,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InvoiceData) Reset()         { *m = InvoiceData{} }
func (m *InvoiceData) String() string { return proto.CompactTextString(m) }
func (*InvoiceData) ProtoMessage()    {}
func (*InvoiceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_invoice_6ff8631ab11abd9c, []int{0}
}
func (m *InvoiceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceData.Unmarshal(m, b)
}
func (m *InvoiceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceData.Marshal(b, m, deterministic)
}
func (dst *InvoiceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceData.Merge(dst, src)
}
func (m *InvoiceData) XXX_Size() int {
	return xxx_messageInfo_InvoiceData.Size(m)
}
func (m *InvoiceData) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceData.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceData proto.InternalMessageInfo

func (m *InvoiceData) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

func (m *InvoiceData) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *InvoiceData) GetSenderStreet() string {
	if m != nil {
		return m.SenderStreet
	}
	return ""
}

func (m *InvoiceData) GetSenderCity() string {
	if m != nil {
		return m.SenderCity
	}
	return ""
}

func (m *InvoiceData) GetSenderZipcode() string {
	if m != nil {
		return m.SenderZipcode
	}
	return ""
}

func (m *InvoiceData) GetSenderCountry() string {
	if m != nil {
		return m.SenderCountry
	}
	return ""
}

func (m *InvoiceData) GetRecipientName() string {
	if m != nil {
		return m.RecipientName
	}
	return ""
}

func (m *InvoiceData) GetRecipientStreet() string {
	if m != nil {
		return m.RecipientStreet
	}
	return ""
}

func (m *InvoiceData) GetRecipientCity() string {
	if m != nil {
		return m.RecipientCity
	}
	return ""
}

func (m *InvoiceData) GetRecipientZipcode() string {
	if m != nil {
		return m.RecipientZipcode
	}
	return ""
}

func (m *InvoiceData) GetRecipientCountry() string {
	if m != nil {
		return m.RecipientCountry
	}
	return ""
}

func (m *InvoiceData) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *InvoiceData) GetGrossAmount() int64 {
	if m != nil {
		return m.GrossAmount
	}
	return 0
}

func (m *InvoiceData) GetNetAmount() int64 {
	if m != nil {
		return m.NetAmount
	}
	return 0
}

func (m *InvoiceData) GetTaxAmount() int64 {
	if m != nil {
		return m.TaxAmount
	}
	return 0
}

func (m *InvoiceData) GetTaxRate() int64 {
	if m != nil {
		return m.TaxRate
	}
	return 0
}

func (m *InvoiceData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *InvoiceData) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *InvoiceData) GetPayee() []byte {
	if m != nil {
		return m.Payee
	}
	return nil
}

func (m *InvoiceData) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *InvoiceData) GetDueDate() *timestamp.Timestamp {
	if m != nil {
		return m.DueDate
	}
	return nil
}

func (m *InvoiceData) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *InvoiceData) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

// InvoiceDataSalts keeps track of the salts used for each InvoiceData field.
type InvoiceDataSalts struct {
	InvoiceNumber        []byte   `protobuf:"bytes,1,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	SenderName           []byte   `protobuf:"bytes,3,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderStreet         []byte   `protobuf:"bytes,4,opt,name=sender_street,json=senderStreet,proto3" json:"sender_street,omitempty"`
	SenderCity           []byte   `protobuf:"bytes,5,opt,name=sender_city,json=senderCity,proto3" json:"sender_city,omitempty"`
	SenderZipcode        []byte   `protobuf:"bytes,6,opt,name=sender_zipcode,json=senderZipcode,proto3" json:"sender_zipcode,omitempty"`
	SenderCountry        []byte   `protobuf:"bytes,7,opt,name=sender_country,json=senderCountry,proto3" json:"sender_country,omitempty"`
	RecipientName        []byte   `protobuf:"bytes,8,opt,name=recipient_name,json=recipientName,proto3" json:"recipient_name,omitempty"`
	RecipientStreet      []byte   `protobuf:"bytes,9,opt,name=recipient_street,json=recipientStreet,proto3" json:"recipient_street,omitempty"`
	RecipientCity        []byte   `protobuf:"bytes,10,opt,name=recipient_city,json=recipientCity,proto3" json:"recipient_city,omitempty"`
	RecipientZipcode     []byte   `protobuf:"bytes,11,opt,name=recipient_zipcode,json=recipientZipcode,proto3" json:"recipient_zipcode,omitempty"`
	RecipientCountry     []byte   `protobuf:"bytes,12,opt,name=recipient_country,json=recipientCountry,proto3" json:"recipient_country,omitempty"`
	Currency             []byte   `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	GrossAmount          []byte   `protobuf:"bytes,14,opt,name=gross_amount,json=grossAmount,proto3" json:"gross_amount,omitempty"`
	NetAmount            []byte   `protobuf:"bytes,15,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	TaxAmount            []byte   `protobuf:"bytes,16,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TaxRate              []byte   `protobuf:"bytes,17,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	Recipient            []byte   `protobuf:"bytes,18,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender               []byte   `protobuf:"bytes,19,opt,name=sender,proto3" json:"sender,omitempty"`
	Payee                []byte   `protobuf:"bytes,20,opt,name=payee,proto3" json:"payee,omitempty"`
	Comment              []byte   `protobuf:"bytes,21,opt,name=comment,proto3" json:"comment,omitempty"`
	DueDate              []byte   `protobuf:"bytes,22,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	DateCreated          []byte   `protobuf:"bytes,23,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	ExtraData            []byte   `protobuf:"bytes,24,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvoiceDataSalts) Reset()         { *m = InvoiceDataSalts{} }
func (m *InvoiceDataSalts) String() string { return proto.CompactTextString(m) }
func (*InvoiceDataSalts) ProtoMessage()    {}
func (*InvoiceDataSalts) Descriptor() ([]byte, []int) {
	return fileDescriptor_invoice_6ff8631ab11abd9c, []int{1}
}
func (m *InvoiceDataSalts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceDataSalts.Unmarshal(m, b)
}
func (m *InvoiceDataSalts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceDataSalts.Marshal(b, m, deterministic)
}
func (dst *InvoiceDataSalts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceDataSalts.Merge(dst, src)
}
func (m *InvoiceDataSalts) XXX_Size() int {
	return xxx_messageInfo_InvoiceDataSalts.Size(m)
}
func (m *InvoiceDataSalts) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceDataSalts.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceDataSalts proto.InternalMessageInfo

func (m *InvoiceDataSalts) GetInvoiceNumber() []byte {
	if m != nil {
		return m.InvoiceNumber
	}
	return nil
}

func (m *InvoiceDataSalts) GetSenderName() []byte {
	if m != nil {
		return m.SenderName
	}
	return nil
}

func (m *InvoiceDataSalts) GetSenderStreet() []byte {
	if m != nil {
		return m.SenderStreet
	}
	return nil
}

func (m *InvoiceDataSalts) GetSenderCity() []byte {
	if m != nil {
		return m.SenderCity
	}
	return nil
}

func (m *InvoiceDataSalts) GetSenderZipcode() []byte {
	if m != nil {
		return m.SenderZipcode
	}
	return nil
}

func (m *InvoiceDataSalts) GetSenderCountry() []byte {
	if m != nil {
		return m.SenderCountry
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipientName() []byte {
	if m != nil {
		return m.RecipientName
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipientStreet() []byte {
	if m != nil {
		return m.RecipientStreet
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipientCity() []byte {
	if m != nil {
		return m.RecipientCity
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipientZipcode() []byte {
	if m != nil {
		return m.RecipientZipcode
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipientCountry() []byte {
	if m != nil {
		return m.RecipientCountry
	}
	return nil
}

func (m *InvoiceDataSalts) GetCurrency() []byte {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *InvoiceDataSalts) GetGrossAmount() []byte {
	if m != nil {
		return m.GrossAmount
	}
	return nil
}

func (m *InvoiceDataSalts) GetNetAmount() []byte {
	if m != nil {
		return m.NetAmount
	}
	return nil
}

func (m *InvoiceDataSalts) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *InvoiceDataSalts) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *InvoiceDataSalts) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *InvoiceDataSalts) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *InvoiceDataSalts) GetPayee() []byte {
	if m != nil {
		return m.Payee
	}
	return nil
}

func (m *InvoiceDataSalts) GetComment() []byte {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *InvoiceDataSalts) GetDueDate() []byte {
	if m != nil {
		return m.DueDate
	}
	return nil
}

func (m *InvoiceDataSalts) GetDateCreated() []byte {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *InvoiceDataSalts) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

// InvoiceDocument combines teh salts, data & coredocument for an invoice
type InvoiceDocument struct {
	CoreDocument         *coredocument.CoreDocument `protobuf:"bytes,1,opt,name=core_document,json=coreDocument" json:"core_document,omitempty"`
	Data                 *InvoiceData               `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Salts                *InvoiceDataSalts          `protobuf:"bytes,3,opt,name=salts" json:"salts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *InvoiceDocument) Reset()         { *m = InvoiceDocument{} }
func (m *InvoiceDocument) String() string { return proto.CompactTextString(m) }
func (*InvoiceDocument) ProtoMessage()    {}
func (*InvoiceDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_invoice_6ff8631ab11abd9c, []int{2}
}
func (m *InvoiceDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceDocument.Unmarshal(m, b)
}
func (m *InvoiceDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceDocument.Marshal(b, m, deterministic)
}
func (dst *InvoiceDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceDocument.Merge(dst, src)
}
func (m *InvoiceDocument) XXX_Size() int {
	return xxx_messageInfo_InvoiceDocument.Size(m)
}
func (m *InvoiceDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceDocument.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceDocument proto.InternalMessageInfo

func (m *InvoiceDocument) GetCoreDocument() *coredocument.CoreDocument {
	if m != nil {
		return m.CoreDocument
	}
	return nil
}

func (m *InvoiceDocument) GetData() *InvoiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InvoiceDocument) GetSalts() *InvoiceDataSalts {
	if m != nil {
		return m.Salts
	}
	return nil
}

func init() {
	proto.RegisterType((*InvoiceData)(nil), "invoice.InvoiceData")
	proto.RegisterType((*InvoiceDataSalts)(nil), "invoice.InvoiceDataSalts")
	proto.RegisterType((*InvoiceDocument)(nil), "invoice.InvoiceDocument")
}

func init() { proto.RegisterFile("invoice/invoice.proto", fileDescriptor_invoice_6ff8631ab11abd9c) }

var fileDescriptor_invoice_6ff8631ab11abd9c = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x15, 0xb6, 0xf5, 0xc3, 0x39, 0xdd, 0x87, 0xd9, 0x86, 0x57, 0x81, 0xd6, 0x0d, 0x21,
	0x15, 0x21, 0xb5, 0xd2, 0x10, 0x97, 0x08, 0xb1, 0x72, 0xc3, 0xcd, 0x34, 0x65, 0x5c, 0xed, 0xa6,
	0x72, 0x93, 0xc3, 0x14, 0x69, 0x49, 0x2a, 0xc7, 0x41, 0x2d, 0xcf, 0xc2, 0x2b, 0xf0, 0x2c, 0xbc,
	0x12, 0xf2, 0x71, 0xdc, 0x64, 0xd3, 0x58, 0xb3, 0x1b, 0xae, 0xa6, 0xf3, 0x3f, 0xbf, 0x38, 0x3e,
	0xab, 0x7f, 0x31, 0x3b, 0x88, 0xd3, 0x1f, 0x59, 0x1c, 0xe2, 0xb8, 0xfc, 0x3b, 0x9a, 0xab, 0x4c,
	0x67, 0xbc, 0x5d, 0x96, 0xfd, 0xe3, 0x30, 0x53, 0x18, 0x65, 0x61, 0x91, 0x60, 0xaa, 0xc7, 0xf5,
	0xc2, 0x92, 0xfd, 0xe3, 0x9b, 0x2c, 0xbb, 0xb9, 0xc5, 0x31, 0x55, 0xb3, 0xe2, 0xfb, 0x58, 0xc7,
	0x09, 0xe6, 0x5a, 0x26, 0x73, 0x0b, 0x9c, 0xfe, 0x69, 0x31, 0xff, 0xab, 0x5d, 0xed, 0x8b, 0xd4,
	0x92, 0xbf, 0x61, 0xdb, 0xe5, 0xe2, 0xd3, 0xb4, 0x48, 0x66, 0xa8, 0x84, 0x37, 0xf0, 0x86, 0xdd,
	0xa0, 0x57, 0xa6, 0x17, 0x14, 0xf2, 0x63, 0xe6, 0xe7, 0x98, 0x46, 0xa8, 0xa6, 0xa9, 0x4c, 0x50,
	0x6c, 0x10, 0xc3, 0x6c, 0x74, 0x21, 0x13, 0xe4, 0xaf, 0x59, 0xaf, 0x04, 0x72, 0xad, 0x10, 0xb5,
	0xd8, 0x24, 0x04, 0x6c, 0x78, 0x45, 0x59, 0x6d, 0x95, 0x30, 0xd6, 0x4b, 0xb1, 0x55, 0x5f, 0x65,
	0x12, 0xeb, 0xa5, 0xd9, 0x4d, 0x09, 0xfc, 0x8c, 0xe7, 0x61, 0x16, 0xa1, 0x68, 0xd9, 0xdd, 0xd8,
	0xf4, 0xda, 0x86, 0x35, 0x2c, 0xcc, 0x8a, 0x54, 0xab, 0xa5, 0x68, 0xd7, 0xb1, 0x89, 0x0d, 0x0d,
	0xa6, 0x30, 0x8c, 0xe7, 0x31, 0xa6, 0xda, 0xee, 0xbb, 0x63, 0xb1, 0x55, 0x4a, 0x5b, 0x7f, 0xcb,
	0x76, 0x2b, 0xac, 0xdc, 0x7d, 0x97, 0xc0, 0x9d, 0x55, 0x5e, 0x0e, 0x70, 0x67, 0x45, 0x9a, 0x81,
	0xdd, 0x5b, 0x91, 0xc6, 0x78, 0xc7, 0xf6, 0x2a, 0xcc, 0x4d, 0xe2, 0x13, 0x59, 0xbd, 0xca, 0x0d,
	0x73, 0x07, 0x76, 0xf3, 0xc0, 0x3d, 0xd8, 0x8d, 0xd4, 0x67, 0x9d, 0xb0, 0x50, 0x0a, 0xd3, 0x70,
	0x29, 0x7a, 0xc4, 0xac, 0x6a, 0x7e, 0xc2, 0xe0, 0x46, 0x65, 0x79, 0x3e, 0x95, 0x89, 0xa1, 0xc5,
	0xf6, 0xc0, 0x1b, 0x6e, 0x04, 0x3e, 0x65, 0x9f, 0x29, 0xe2, 0xaf, 0x18, 0x4b, 0x51, 0x3b, 0x60,
	0x87, 0x80, 0x6e, 0x8a, 0xba, 0x6a, 0x6b, 0xb9, 0x70, 0xed, 0x5d, 0xdb, 0xd6, 0x72, 0x51, 0xb6,
	0x8f, 0x58, 0xc7, 0xb4, 0x95, 0xd4, 0x28, 0xf6, 0xa8, 0xd9, 0xd6, 0x72, 0x11, 0x48, 0x8d, 0xfc,
	0x25, 0xeb, 0xae, 0xf6, 0x2a, 0xf8, 0xc0, 0x1b, 0x42, 0x50, 0x05, 0xfc, 0x90, 0xb5, 0xec, 0x2f,
	0x23, 0x9e, 0x53, 0xab, 0xac, 0xf8, 0x3e, 0xdb, 0x9a, 0xcb, 0x25, 0xa2, 0xd8, 0xa7, 0xd8, 0x16,
	0x5c, 0xb0, 0x76, 0x98, 0x25, 0xe6, 0x50, 0x8b, 0x03, 0x1a, 0xd1, 0x95, 0xfc, 0x03, 0xeb, 0x44,
	0x05, 0x4e, 0x23, 0xb3, 0x81, 0xc3, 0x81, 0x37, 0xf4, 0xcf, 0xfa, 0x23, 0x7b, 0xe0, 0x47, 0xee,
	0xc0, 0x8f, 0xbe, 0xb9, 0x03, 0x1f, 0xb4, 0xa3, 0xc2, 0x9c, 0x71, 0xe4, 0x1f, 0x19, 0x98, 0x47,
	0xa6, 0xa1, 0x42, 0xa9, 0x31, 0x12, 0x2f, 0xd6, 0x3e, 0xea, 0x1b, 0x7e, 0x62, 0x71, 0xf3, 0x5f,
	0xc1, 0x85, 0x56, 0xd2, 0xbc, 0x57, 0x0a, 0x61, 0x87, 0xa3, 0xc4, 0x18, 0x74, 0xfa, 0xab, 0xc5,
	0x76, 0x6b, 0x46, 0x5d, 0xc9, 0x5b, 0x9d, 0xff, 0x43, 0x2b, 0x68, 0xa0, 0x15, 0xac, 0xd7, 0x0a,
	0xd6, 0x6b, 0x05, 0x0d, 0xb4, 0x82, 0x66, 0x5a, 0x41, 0x33, 0xad, 0xa0, 0xa9, 0x56, 0xd0, 0x54,
	0x2b, 0x68, 0xac, 0x15, 0x3c, 0x45, 0x2b, 0x68, 0xa0, 0x15, 0xac, 0xd1, 0x0a, 0xd6, 0x69, 0x05,
	0x8f, 0x6b, 0x05, 0x8f, 0x69, 0x05, 0xff, 0x45, 0x2b, 0xa8, 0xb4, 0x3a, 0xba, 0xa7, 0x15, 0x54,
	0xea, 0x9c, 0x3c, 0xa0, 0x0e, 0x3c, 0x49, 0x8f, 0xdf, 0x1e, 0xdb, 0x71, 0x7a, 0x94, 0x77, 0x15,
	0xff, 0xc4, 0x7a, 0xe6, 0xee, 0x9a, 0xba, 0xcb, 0x8b, 0xe4, 0x30, 0x46, 0xde, 0xb9, 0xd1, 0x26,
	0x99, 0x5a, 0x3d, 0x12, 0x40, 0x58, 0xab, 0xf8, 0x90, 0x6d, 0xd2, 0xdb, 0x9e, 0xd1, 0x73, 0xfb,
	0x23, 0x77, 0x5d, 0xd6, 0x3c, 0x0c, 0x88, 0xe0, 0x63, 0xb6, 0x95, 0x1b, 0x23, 0xc9, 0x2d, 0xff,
	0xec, 0xe8, 0x21, 0x94, 0x94, 0x0d, 0x2c, 0x77, 0x3e, 0x64, 0x7e, 0x98, 0x25, 0x0e, 0x3b, 0x87,
	0x92, 0xbb, 0x34, 0x1f, 0x89, 0x4b, 0xef, 0xba, 0x5b, 0x36, 0xe6, 0xb3, 0x59, 0x8b, 0x3e, 0x1c,
	0xef, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xe3, 0x9f, 0x08, 0xb5, 0x07, 0x00, 0x00,
}
