// Code generated by protoc-gen-go. DO NOT EDIT.
// source: invoice/invoice.proto

package invoicepb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// InvoiceData is the default invoice schema
type InvoiceData struct {
	// invoice number or reference number
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// invoice status
	Status                   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	SenderInvoiceId          string `protobuf:"bytes,3,opt,name=sender_invoice_id,json=senderInvoiceId,proto3" json:"sender_invoice_id,omitempty"`
	RecipientInvoiceId       string `protobuf:"bytes,4,opt,name=recipient_invoice_id,json=recipientInvoiceId,proto3" json:"recipient_invoice_id,omitempty"`
	SenderCompanyName        string `protobuf:"bytes,5,opt,name=sender_company_name,json=senderCompanyName,proto3" json:"sender_company_name,omitempty"`
	SenderContactPersonName  string `protobuf:"bytes,6,opt,name=sender_contact_person_name,json=senderContactPersonName,proto3" json:"sender_contact_person_name,omitempty"`
	SenderStreet1            string `protobuf:"bytes,7,opt,name=sender_street1,json=senderStreet1,proto3" json:"sender_street1,omitempty"`
	SenderStreet2            string `protobuf:"bytes,8,opt,name=sender_street2,json=senderStreet2,proto3" json:"sender_street2,omitempty"`
	SenderCity               string `protobuf:"bytes,9,opt,name=sender_city,json=senderCity,proto3" json:"sender_city,omitempty"`
	SenderZipcode            string `protobuf:"bytes,10,opt,name=sender_zipcode,json=senderZipcode,proto3" json:"sender_zipcode,omitempty"`
	SenderState              string `protobuf:"bytes,11,opt,name=sender_state,json=senderState,proto3" json:"sender_state,omitempty"`
	SenderCountry            string `protobuf:"bytes,12,opt,name=sender_country,json=senderCountry,proto3" json:"sender_country,omitempty"`
	BillToCompanyName        string `protobuf:"bytes,43,opt,name=bill_to_company_name,json=billToCompanyName,proto3" json:"bill_to_company_name,omitempty"`
	BillToContactPersonName  string `protobuf:"bytes,44,opt,name=bill_to_contact_person_name,json=billToContactPersonName,proto3" json:"bill_to_contact_person_name,omitempty"`
	BillToStreet1            string `protobuf:"bytes,15,opt,name=bill_to_street1,json=billToStreet1,proto3" json:"bill_to_street1,omitempty"`
	BillToStreet2            string `protobuf:"bytes,16,opt,name=bill_to_street2,json=billToStreet2,proto3" json:"bill_to_street2,omitempty"`
	BillToCity               string `protobuf:"bytes,17,opt,name=bill_to_city,json=billToCity,proto3" json:"bill_to_city,omitempty"`
	BillToZipcode            string `protobuf:"bytes,18,opt,name=bill_to_zipcode,json=billToZipcode,proto3" json:"bill_to_zipcode,omitempty"`
	BillToState              string `protobuf:"bytes,50,opt,name=bill_to_state,json=billToState,proto3" json:"bill_to_state,omitempty"`
	BillToCountry            string `protobuf:"bytes,20,opt,name=bill_to_country,json=billToCountry,proto3" json:"bill_to_country,omitempty"`
	BillToVatNumber          string `protobuf:"bytes,21,opt,name=bill_to_vat_number,json=billToVatNumber,proto3" json:"bill_to_vat_number,omitempty"`
	BillToLocalTaxId         string `protobuf:"bytes,60,opt,name=bill_to_local_tax_id,json=billToLocalTaxId,proto3" json:"bill_to_local_tax_id,omitempty"`
	RemitToCompanyName       string `protobuf:"bytes,23,opt,name=remit_to_company_name,json=remitToCompanyName,proto3" json:"remit_to_company_name,omitempty"`
	RemitToContactPersonName string `protobuf:"bytes,24,opt,name=remit_to_contact_person_name,json=remitToContactPersonName,proto3" json:"remit_to_contact_person_name,omitempty"`
	RemitToStreet1           string `protobuf:"bytes,25,opt,name=remit_to_street1,json=remitToStreet1,proto3" json:"remit_to_street1,omitempty"`
	RemitToStreet2           string `protobuf:"bytes,26,opt,name=remit_to_street2,json=remitToStreet2,proto3" json:"remit_to_street2,omitempty"`
	RemitToCity              string `protobuf:"bytes,27,opt,name=remit_to_city,json=remitToCity,proto3" json:"remit_to_city,omitempty"`
	RemitToZipcode           string `protobuf:"bytes,28,opt,name=remit_to_zipcode,json=remitToZipcode,proto3" json:"remit_to_zipcode,omitempty"`
	RemitToState             string `protobuf:"bytes,30,opt,name=remit_to_state,json=remitToState,proto3" json:"remit_to_state,omitempty"`
	RemitToCountry           string `protobuf:"bytes,31,opt,name=remit_to_country,json=remitToCountry,proto3" json:"remit_to_country,omitempty"`
	RemitToVatNumber         string `protobuf:"bytes,32,opt,name=remit_to_vat_number,json=remitToVatNumber,proto3" json:"remit_to_vat_number,omitempty"`
	RemitToLocalTaxId        string `protobuf:"bytes,33,opt,name=remit_to_local_tax_id,json=remitToLocalTaxId,proto3" json:"remit_to_local_tax_id,omitempty"`
	RemitToTaxCountry        string `protobuf:"bytes,34,opt,name=remit_to_tax_country,json=remitToTaxCountry,proto3" json:"remit_to_tax_country,omitempty"`
	ShipToCompanyName        string `protobuf:"bytes,35,opt,name=ship_to_company_name,json=shipToCompanyName,proto3" json:"ship_to_company_name,omitempty"`
	ShipToContactPersonName  string `protobuf:"bytes,36,opt,name=ship_to_contact_person_name,json=shipToContactPersonName,proto3" json:"ship_to_contact_person_name,omitempty"`
	ShipToStreet1            string `protobuf:"bytes,37,opt,name=ship_to_street1,json=shipToStreet1,proto3" json:"ship_to_street1,omitempty"`
	ShipToStreet2            string `protobuf:"bytes,38,opt,name=ship_to_street2,json=shipToStreet2,proto3" json:"ship_to_street2,omitempty"`
	ShipToCity               string `protobuf:"bytes,39,opt,name=ship_to_city,json=shipToCity,proto3" json:"ship_to_city,omitempty"`
	ShipToZipcode            string `protobuf:"bytes,40,opt,name=ship_to_zipcode,json=shipToZipcode,proto3" json:"ship_to_zipcode,omitempty"`
	ShipToState              string `protobuf:"bytes,41,opt,name=ship_to_state,json=shipToState,proto3" json:"ship_to_state,omitempty"`
	ShipToCountry            string `protobuf:"bytes,42,opt,name=ship_to_country,json=shipToCountry,proto3" json:"ship_to_country,omitempty"`
	Currency                 string `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	GrossAmount              []byte `protobuf:"bytes,14,opt,name=gross_amount,json=grossAmount,proto3" json:"gross_amount,omitempty"`
	NetAmount                []byte `protobuf:"bytes,45,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	TaxAmount                []byte `protobuf:"bytes,46,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TaxRate                  []byte `protobuf:"bytes,47,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	//bool tax_on_line_level = 48;
	// centrifuge ID of the recipient
	Recipient []byte `protobuf:"bytes,49,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// centrifuge ID of the sender
	Sender []byte `protobuf:"bytes,19,opt,name=sender,proto3" json:"sender,omitempty"`
	// centrifuge ID of the payee
	Payee          []byte `protobuf:"bytes,51,opt,name=payee,proto3" json:"payee,omitempty"`
	Comment        string `protobuf:"bytes,52,opt,name=comment,proto3" json:"comment,omitempty"`
	ShippingTerms  string `protobuf:"bytes,53,opt,name=shipping_terms,json=shippingTerms,proto3" json:"shipping_terms,omitempty"`
	RequesterEmail string `protobuf:"bytes,54,opt,name=requester_email,json=requesterEmail,proto3" json:"requester_email,omitempty"`
	RequesterName  string `protobuf:"bytes,55,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	//number of the delivery note
	DeliveryNumber string `protobuf:"bytes,56,opt,name=delivery_number,json=deliveryNumber,proto3" json:"delivery_number,omitempty"`
	//bool is_credit_note = 57;
	CreditNoteInvoiceNumber string               `protobuf:"bytes,58,opt,name=credit_note_invoice_number,json=creditNoteInvoiceNumber,proto3" json:"credit_note_invoice_number,omitempty"`
	CreditForInvoiceDate    *timestamp.Timestamp `protobuf:"bytes,59,opt,name=credit_for_invoice_date,json=creditForInvoiceDate,proto3" json:"credit_for_invoice_date,omitempty"`
	DateDue                 *timestamp.Timestamp `protobuf:"bytes,22,opt,name=date_due,json=dateDue,proto3" json:"date_due,omitempty"`
	DatePaid                *timestamp.Timestamp `protobuf:"bytes,61,opt,name=date_paid,json=datePaid,proto3" json:"date_paid,omitempty"`
	DateUpdated             *timestamp.Timestamp `protobuf:"bytes,62,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	DateCreated             *timestamp.Timestamp `protobuf:"bytes,63,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	Attachments             []*BinaryAttachment  `protobuf:"bytes,64,rep,name=attachments,proto3" json:"attachments,omitempty"`
	LineItems               []*InvoiceLineItem   `protobuf:"bytes,65,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	PaymentDetails          []*PaymentDetails    `protobuf:"bytes,66,rep,name=payment_details,json=paymentDetails,proto3" json:"payment_details,omitempty"`
	TaxItems                []*InvoiceTaxItem    `protobuf:"bytes,67,rep,name=tax_items,json=taxItems,proto3" json:"tax_items,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *InvoiceData) Reset()         { *m = InvoiceData{} }
func (m *InvoiceData) String() string { return proto.CompactTextString(m) }
func (*InvoiceData) ProtoMessage()    {}
func (*InvoiceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{0}
}

func (m *InvoiceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceData.Unmarshal(m, b)
}
func (m *InvoiceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceData.Marshal(b, m, deterministic)
}
func (m *InvoiceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceData.Merge(m, src)
}
func (m *InvoiceData) XXX_Size() int {
	return xxx_messageInfo_InvoiceData.Size(m)
}
func (m *InvoiceData) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceData.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceData proto.InternalMessageInfo

func (m *InvoiceData) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *InvoiceData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InvoiceData) GetSenderInvoiceId() string {
	if m != nil {
		return m.SenderInvoiceId
	}
	return ""
}

func (m *InvoiceData) GetRecipientInvoiceId() string {
	if m != nil {
		return m.RecipientInvoiceId
	}
	return ""
}

func (m *InvoiceData) GetSenderCompanyName() string {
	if m != nil {
		return m.SenderCompanyName
	}
	return ""
}

func (m *InvoiceData) GetSenderContactPersonName() string {
	if m != nil {
		return m.SenderContactPersonName
	}
	return ""
}

func (m *InvoiceData) GetSenderStreet1() string {
	if m != nil {
		return m.SenderStreet1
	}
	return ""
}

func (m *InvoiceData) GetSenderStreet2() string {
	if m != nil {
		return m.SenderStreet2
	}
	return ""
}

func (m *InvoiceData) GetSenderCity() string {
	if m != nil {
		return m.SenderCity
	}
	return ""
}

func (m *InvoiceData) GetSenderZipcode() string {
	if m != nil {
		return m.SenderZipcode
	}
	return ""
}

func (m *InvoiceData) GetSenderState() string {
	if m != nil {
		return m.SenderState
	}
	return ""
}

func (m *InvoiceData) GetSenderCountry() string {
	if m != nil {
		return m.SenderCountry
	}
	return ""
}

func (m *InvoiceData) GetBillToCompanyName() string {
	if m != nil {
		return m.BillToCompanyName
	}
	return ""
}

func (m *InvoiceData) GetBillToContactPersonName() string {
	if m != nil {
		return m.BillToContactPersonName
	}
	return ""
}

func (m *InvoiceData) GetBillToStreet1() string {
	if m != nil {
		return m.BillToStreet1
	}
	return ""
}

func (m *InvoiceData) GetBillToStreet2() string {
	if m != nil {
		return m.BillToStreet2
	}
	return ""
}

func (m *InvoiceData) GetBillToCity() string {
	if m != nil {
		return m.BillToCity
	}
	return ""
}

func (m *InvoiceData) GetBillToZipcode() string {
	if m != nil {
		return m.BillToZipcode
	}
	return ""
}

func (m *InvoiceData) GetBillToState() string {
	if m != nil {
		return m.BillToState
	}
	return ""
}

func (m *InvoiceData) GetBillToCountry() string {
	if m != nil {
		return m.BillToCountry
	}
	return ""
}

func (m *InvoiceData) GetBillToVatNumber() string {
	if m != nil {
		return m.BillToVatNumber
	}
	return ""
}

func (m *InvoiceData) GetBillToLocalTaxId() string {
	if m != nil {
		return m.BillToLocalTaxId
	}
	return ""
}

func (m *InvoiceData) GetRemitToCompanyName() string {
	if m != nil {
		return m.RemitToCompanyName
	}
	return ""
}

func (m *InvoiceData) GetRemitToContactPersonName() string {
	if m != nil {
		return m.RemitToContactPersonName
	}
	return ""
}

func (m *InvoiceData) GetRemitToStreet1() string {
	if m != nil {
		return m.RemitToStreet1
	}
	return ""
}

func (m *InvoiceData) GetRemitToStreet2() string {
	if m != nil {
		return m.RemitToStreet2
	}
	return ""
}

func (m *InvoiceData) GetRemitToCity() string {
	if m != nil {
		return m.RemitToCity
	}
	return ""
}

func (m *InvoiceData) GetRemitToZipcode() string {
	if m != nil {
		return m.RemitToZipcode
	}
	return ""
}

func (m *InvoiceData) GetRemitToState() string {
	if m != nil {
		return m.RemitToState
	}
	return ""
}

func (m *InvoiceData) GetRemitToCountry() string {
	if m != nil {
		return m.RemitToCountry
	}
	return ""
}

func (m *InvoiceData) GetRemitToVatNumber() string {
	if m != nil {
		return m.RemitToVatNumber
	}
	return ""
}

func (m *InvoiceData) GetRemitToLocalTaxId() string {
	if m != nil {
		return m.RemitToLocalTaxId
	}
	return ""
}

func (m *InvoiceData) GetRemitToTaxCountry() string {
	if m != nil {
		return m.RemitToTaxCountry
	}
	return ""
}

func (m *InvoiceData) GetShipToCompanyName() string {
	if m != nil {
		return m.ShipToCompanyName
	}
	return ""
}

func (m *InvoiceData) GetShipToContactPersonName() string {
	if m != nil {
		return m.ShipToContactPersonName
	}
	return ""
}

func (m *InvoiceData) GetShipToStreet1() string {
	if m != nil {
		return m.ShipToStreet1
	}
	return ""
}

func (m *InvoiceData) GetShipToStreet2() string {
	if m != nil {
		return m.ShipToStreet2
	}
	return ""
}

func (m *InvoiceData) GetShipToCity() string {
	if m != nil {
		return m.ShipToCity
	}
	return ""
}

func (m *InvoiceData) GetShipToZipcode() string {
	if m != nil {
		return m.ShipToZipcode
	}
	return ""
}

func (m *InvoiceData) GetShipToState() string {
	if m != nil {
		return m.ShipToState
	}
	return ""
}

func (m *InvoiceData) GetShipToCountry() string {
	if m != nil {
		return m.ShipToCountry
	}
	return ""
}

func (m *InvoiceData) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *InvoiceData) GetGrossAmount() []byte {
	if m != nil {
		return m.GrossAmount
	}
	return nil
}

func (m *InvoiceData) GetNetAmount() []byte {
	if m != nil {
		return m.NetAmount
	}
	return nil
}

func (m *InvoiceData) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *InvoiceData) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *InvoiceData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *InvoiceData) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *InvoiceData) GetPayee() []byte {
	if m != nil {
		return m.Payee
	}
	return nil
}

func (m *InvoiceData) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *InvoiceData) GetShippingTerms() string {
	if m != nil {
		return m.ShippingTerms
	}
	return ""
}

func (m *InvoiceData) GetRequesterEmail() string {
	if m != nil {
		return m.RequesterEmail
	}
	return ""
}

func (m *InvoiceData) GetRequesterName() string {
	if m != nil {
		return m.RequesterName
	}
	return ""
}

func (m *InvoiceData) GetDeliveryNumber() string {
	if m != nil {
		return m.DeliveryNumber
	}
	return ""
}

func (m *InvoiceData) GetCreditNoteInvoiceNumber() string {
	if m != nil {
		return m.CreditNoteInvoiceNumber
	}
	return ""
}

func (m *InvoiceData) GetCreditForInvoiceDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreditForInvoiceDate
	}
	return nil
}

func (m *InvoiceData) GetDateDue() *timestamp.Timestamp {
	if m != nil {
		return m.DateDue
	}
	return nil
}

func (m *InvoiceData) GetDatePaid() *timestamp.Timestamp {
	if m != nil {
		return m.DatePaid
	}
	return nil
}

func (m *InvoiceData) GetDateUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.DateUpdated
	}
	return nil
}

func (m *InvoiceData) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *InvoiceData) GetAttachments() []*BinaryAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *InvoiceData) GetLineItems() []*InvoiceLineItem {
	if m != nil {
		return m.LineItems
	}
	return nil
}

func (m *InvoiceData) GetPaymentDetails() []*PaymentDetails {
	if m != nil {
		return m.PaymentDetails
	}
	return nil
}

func (m *InvoiceData) GetTaxItems() []*InvoiceTaxItem {
	if m != nil {
		return m.TaxItems
	}
	return nil
}

type InvoiceTaxItem struct {
	ItemNumber           string   `protobuf:"bytes,1,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	InvoiceItemNumber    string   `protobuf:"bytes,2,opt,name=invoice_item_number,json=invoiceItemNumber,proto3" json:"invoice_item_number,omitempty"`
	TaxAmount            []byte   `protobuf:"bytes,3,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TaxRate              []byte   `protobuf:"bytes,4,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	TaxCode              []byte   `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	TaxBaseAmount        []byte   `protobuf:"bytes,6,opt,name=tax_base_amount,json=taxBaseAmount,proto3" json:"tax_base_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvoiceTaxItem) Reset()         { *m = InvoiceTaxItem{} }
func (m *InvoiceTaxItem) String() string { return proto.CompactTextString(m) }
func (*InvoiceTaxItem) ProtoMessage()    {}
func (*InvoiceTaxItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{1}
}

func (m *InvoiceTaxItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceTaxItem.Unmarshal(m, b)
}
func (m *InvoiceTaxItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceTaxItem.Marshal(b, m, deterministic)
}
func (m *InvoiceTaxItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceTaxItem.Merge(m, src)
}
func (m *InvoiceTaxItem) XXX_Size() int {
	return xxx_messageInfo_InvoiceTaxItem.Size(m)
}
func (m *InvoiceTaxItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceTaxItem.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceTaxItem proto.InternalMessageInfo

func (m *InvoiceTaxItem) GetItemNumber() string {
	if m != nil {
		return m.ItemNumber
	}
	return ""
}

func (m *InvoiceTaxItem) GetInvoiceItemNumber() string {
	if m != nil {
		return m.InvoiceItemNumber
	}
	return ""
}

func (m *InvoiceTaxItem) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *InvoiceTaxItem) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *InvoiceTaxItem) GetTaxCode() []byte {
	if m != nil {
		return m.TaxCode
	}
	return nil
}

func (m *InvoiceTaxItem) GetTaxBaseAmount() []byte {
	if m != nil {
		return m.TaxBaseAmount
	}
	return nil
}

type BinaryAttachment struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//mime type of attached file
	FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	// in byte
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	//the md5 checksum of the original file for easier verification - optional
	Checksum             []byte   `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryAttachment) Reset()         { *m = BinaryAttachment{} }
func (m *BinaryAttachment) String() string { return proto.CompactTextString(m) }
func (*BinaryAttachment) ProtoMessage()    {}
func (*BinaryAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{2}
}

func (m *BinaryAttachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryAttachment.Unmarshal(m, b)
}
func (m *BinaryAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryAttachment.Marshal(b, m, deterministic)
}
func (m *BinaryAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryAttachment.Merge(m, src)
}
func (m *BinaryAttachment) XXX_Size() int {
	return xxx_messageInfo_BinaryAttachment.Size(m)
}
func (m *BinaryAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryAttachment proto.InternalMessageInfo

func (m *BinaryAttachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryAttachment) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *BinaryAttachment) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BinaryAttachment) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BinaryAttachment) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

type PaymentDetails struct {
	//identifying this payment. could be a sequential number, could be a transaction hash of the crypto payment
	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DateExecuted *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_executed,json=dateExecuted,proto3" json:"date_executed,omitempty"`
	//centrifuge id of payee
	Payee []byte `protobuf:"bytes,3,opt,name=payee,proto3" json:"payee,omitempty"`
	//centrifuge id of payer
	Payer    []byte `protobuf:"bytes,4,opt,name=payer,proto3" json:"payer,omitempty"`
	Amount   []byte `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	//payment reference (e.g. reference field on bank transfer)
	Reference             string `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
	BankName              string `protobuf:"bytes,8,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankAddress           string `protobuf:"bytes,9,opt,name=bank_address,json=bankAddress,proto3" json:"bank_address,omitempty"`
	BankCountry           string `protobuf:"bytes,10,opt,name=bank_country,json=bankCountry,proto3" json:"bank_country,omitempty"`
	BankAccountNumber     string `protobuf:"bytes,11,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankAccountCurrency   string `protobuf:"bytes,12,opt,name=bank_account_currency,json=bankAccountCurrency,proto3" json:"bank_account_currency,omitempty"`
	BankAccountHolderName string `protobuf:"bytes,13,opt,name=bank_account_holder_name,json=bankAccountHolderName,proto3" json:"bank_account_holder_name,omitempty"`
	BankKey               string `protobuf:"bytes,14,opt,name=bank_key,json=bankKey,proto3" json:"bank_key,omitempty"`
	//the ID of the chain to use in URI format. e.g. "ethereum://42/<tokenaddress>"
	CryptoChainUri string `protobuf:"bytes,15,opt,name=crypto_chain_uri,json=cryptoChainUri,proto3" json:"crypto_chain_uri,omitempty"`
	//the transaction in which the payment happened
	CryptoTransactionId string `protobuf:"bytes,16,opt,name=crypto_transaction_id,json=cryptoTransactionId,proto3" json:"crypto_transaction_id,omitempty"`
	//from address
	CryptoFrom string `protobuf:"bytes,17,opt,name=crypto_from,json=cryptoFrom,proto3" json:"crypto_from,omitempty"`
	//to address
	CryptoTo             string   `protobuf:"bytes,18,opt,name=crypto_to,json=cryptoTo,proto3" json:"crypto_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentDetails) Reset()         { *m = PaymentDetails{} }
func (m *PaymentDetails) String() string { return proto.CompactTextString(m) }
func (*PaymentDetails) ProtoMessage()    {}
func (*PaymentDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{3}
}

func (m *PaymentDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentDetails.Unmarshal(m, b)
}
func (m *PaymentDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentDetails.Marshal(b, m, deterministic)
}
func (m *PaymentDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentDetails.Merge(m, src)
}
func (m *PaymentDetails) XXX_Size() int {
	return xxx_messageInfo_PaymentDetails.Size(m)
}
func (m *PaymentDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentDetails proto.InternalMessageInfo

func (m *PaymentDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentDetails) GetDateExecuted() *timestamp.Timestamp {
	if m != nil {
		return m.DateExecuted
	}
	return nil
}

func (m *PaymentDetails) GetPayee() []byte {
	if m != nil {
		return m.Payee
	}
	return nil
}

func (m *PaymentDetails) GetPayer() []byte {
	if m != nil {
		return m.Payer
	}
	return nil
}

func (m *PaymentDetails) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *PaymentDetails) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentDetails) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *PaymentDetails) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *PaymentDetails) GetBankAddress() string {
	if m != nil {
		return m.BankAddress
	}
	return ""
}

func (m *PaymentDetails) GetBankCountry() string {
	if m != nil {
		return m.BankCountry
	}
	return ""
}

func (m *PaymentDetails) GetBankAccountNumber() string {
	if m != nil {
		return m.BankAccountNumber
	}
	return ""
}

func (m *PaymentDetails) GetBankAccountCurrency() string {
	if m != nil {
		return m.BankAccountCurrency
	}
	return ""
}

func (m *PaymentDetails) GetBankAccountHolderName() string {
	if m != nil {
		return m.BankAccountHolderName
	}
	return ""
}

func (m *PaymentDetails) GetBankKey() string {
	if m != nil {
		return m.BankKey
	}
	return ""
}

func (m *PaymentDetails) GetCryptoChainUri() string {
	if m != nil {
		return m.CryptoChainUri
	}
	return ""
}

func (m *PaymentDetails) GetCryptoTransactionId() string {
	if m != nil {
		return m.CryptoTransactionId
	}
	return ""
}

func (m *PaymentDetails) GetCryptoFrom() string {
	if m != nil {
		return m.CryptoFrom
	}
	return ""
}

func (m *PaymentDetails) GetCryptoTo() string {
	if m != nil {
		return m.CryptoTo
	}
	return ""
}

type InvoiceLineItem struct {
	ItemNumber    string `protobuf:"bytes,1,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SenderPartNo  string `protobuf:"bytes,3,opt,name=sender_part_no,json=senderPartNo,proto3" json:"sender_part_no,omitempty"`
	PricePerUnit  []byte `protobuf:"bytes,4,opt,name=price_per_unit,json=pricePerUnit,proto3" json:"price_per_unit,omitempty"`
	Quantity      []byte `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitOfMeasure string `protobuf:"bytes,6,opt,name=unit_of_measure,json=unitOfMeasure,proto3" json:"unit_of_measure,omitempty"`
	NetWeight     []byte `protobuf:"bytes,7,opt,name=net_weight,json=netWeight,proto3" json:"net_weight,omitempty"`
	TaxAmount     []byte `protobuf:"bytes,8,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TaxRate       []byte `protobuf:"bytes,9,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	TaxCode       []byte `protobuf:"bytes,10,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	//the total amount of the line item
	TotalAmount             []byte   `protobuf:"bytes,11,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	PurchaseOrderNumber     string   `protobuf:"bytes,12,opt,name=purchase_order_number,json=purchaseOrderNumber,proto3" json:"purchase_order_number,omitempty"`
	PurchaseOrderItemNumber string   `protobuf:"bytes,13,opt,name=purchase_order_item_number,json=purchaseOrderItemNumber,proto3" json:"purchase_order_item_number,omitempty"`
	DeliveryNoteNumber      string   `protobuf:"bytes,14,opt,name=delivery_note_number,json=deliveryNoteNumber,proto3" json:"delivery_note_number,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *InvoiceLineItem) Reset()         { *m = InvoiceLineItem{} }
func (m *InvoiceLineItem) String() string { return proto.CompactTextString(m) }
func (*InvoiceLineItem) ProtoMessage()    {}
func (*InvoiceLineItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{4}
}

func (m *InvoiceLineItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvoiceLineItem.Unmarshal(m, b)
}
func (m *InvoiceLineItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvoiceLineItem.Marshal(b, m, deterministic)
}
func (m *InvoiceLineItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceLineItem.Merge(m, src)
}
func (m *InvoiceLineItem) XXX_Size() int {
	return xxx_messageInfo_InvoiceLineItem.Size(m)
}
func (m *InvoiceLineItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceLineItem.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceLineItem proto.InternalMessageInfo

func (m *InvoiceLineItem) GetItemNumber() string {
	if m != nil {
		return m.ItemNumber
	}
	return ""
}

func (m *InvoiceLineItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InvoiceLineItem) GetSenderPartNo() string {
	if m != nil {
		return m.SenderPartNo
	}
	return ""
}

func (m *InvoiceLineItem) GetPricePerUnit() []byte {
	if m != nil {
		return m.PricePerUnit
	}
	return nil
}

func (m *InvoiceLineItem) GetQuantity() []byte {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *InvoiceLineItem) GetUnitOfMeasure() string {
	if m != nil {
		return m.UnitOfMeasure
	}
	return ""
}

func (m *InvoiceLineItem) GetNetWeight() []byte {
	if m != nil {
		return m.NetWeight
	}
	return nil
}

func (m *InvoiceLineItem) GetTaxAmount() []byte {
	if m != nil {
		return m.TaxAmount
	}
	return nil
}

func (m *InvoiceLineItem) GetTaxRate() []byte {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *InvoiceLineItem) GetTaxCode() []byte {
	if m != nil {
		return m.TaxCode
	}
	return nil
}

func (m *InvoiceLineItem) GetTotalAmount() []byte {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *InvoiceLineItem) GetPurchaseOrderNumber() string {
	if m != nil {
		return m.PurchaseOrderNumber
	}
	return ""
}

func (m *InvoiceLineItem) GetPurchaseOrderItemNumber() string {
	if m != nil {
		return m.PurchaseOrderItemNumber
	}
	return ""
}

func (m *InvoiceLineItem) GetDeliveryNoteNumber() string {
	if m != nil {
		return m.DeliveryNoteNumber
	}
	return ""
}

func init() {
	proto.RegisterType((*InvoiceData)(nil), "invoice.InvoiceData")
	proto.RegisterType((*InvoiceTaxItem)(nil), "invoice.InvoiceTaxItem")
	proto.RegisterType((*BinaryAttachment)(nil), "invoice.BinaryAttachment")
	proto.RegisterType((*PaymentDetails)(nil), "invoice.PaymentDetails")
	proto.RegisterType((*InvoiceLineItem)(nil), "invoice.InvoiceLineItem")
}

func init() { proto.RegisterFile("invoice/invoice.proto", fileDescriptor_b3e2b5ce0fcadd51) }

var fileDescriptor_b3e2b5ce0fcadd51 = []byte{
	// 1718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xeb, 0x56, 0x23, 0xc7,
	0x11, 0x3e, 0xec, 0x72, 0x91, 0x4a, 0x42, 0x62, 0x07, 0x30, 0x03, 0xbb, 0xc9, 0x02, 0xb1, 0x77,
	0x89, 0x1d, 0x8b, 0x5d, 0xd9, 0x0e, 0x39, 0xc1, 0x37, 0x60, 0xed, 0x13, 0x4e, 0x1c, 0x4c, 0x14,
	0x36, 0x39, 0xc7, 0x7f, 0xe6, 0x34, 0x33, 0x0d, 0xea, 0xb3, 0x9a, 0x8b, 0x7b, 0x7a, 0x36, 0xc8,
	0x2f, 0x90, 0x37, 0xc8, 0xcf, 0x3c, 0x5a, 0x9e, 0x21, 0x8f, 0x90, 0x53, 0xd5, 0xd5, 0x73, 0x91,
	0x9c, 0x25, 0xbf, 0xa4, 0xae, 0xfa, 0xbe, 0xea, 0x9e, 0xba, 0x75, 0x35, 0x6c, 0xaa, 0xe4, 0x6d,
	0xaa, 0x42, 0x79, 0xc8, 0xbf, 0x83, 0x4c, 0xa7, 0x26, 0xf5, 0x56, 0x78, 0xb9, 0xf3, 0xf4, 0x36,
	0x4d, 0x6f, 0x27, 0xf2, 0x90, 0xc4, 0xd7, 0xc5, 0xcd, 0xa1, 0x51, 0xb1, 0xcc, 0x8d, 0x88, 0x33,
	0x8b, 0xdc, 0xff, 0xcf, 0x26, 0x74, 0xce, 0x2d, 0xf8, 0x95, 0x30, 0xc2, 0x7b, 0x0f, 0x96, 0x93,
	0x22, 0xbe, 0x96, 0xda, 0x5f, 0xd8, 0x5d, 0x38, 0x68, 0x8f, 0x78, 0x85, 0xf2, 0xdc, 0x08, 0x53,
	0xe4, 0xfe, 0x03, 0x2b, 0xb7, 0x2b, 0xef, 0x43, 0x78, 0x94, 0xcb, 0x24, 0x92, 0x3a, 0xe0, 0x2d,
	0x03, 0x15, 0xf9, 0x0f, 0x09, 0xd2, 0xb7, 0x0a, 0xb6, 0x7e, 0x1e, 0x79, 0x2f, 0x60, 0x43, 0xcb,
	0x50, 0x65, 0x4a, 0x26, 0xa6, 0x0e, 0x5f, 0x24, 0xb8, 0x57, 0xea, 0x2a, 0xc6, 0x00, 0xd6, 0xd9,
	0x7a, 0x98, 0xc6, 0x99, 0x48, 0xa6, 0x41, 0x22, 0x62, 0xe9, 0x2f, 0x11, 0x81, 0x37, 0x3e, 0xb3,
	0x9a, 0x0b, 0x11, 0x4b, 0xef, 0x18, 0x76, 0x4a, 0x7c, 0x62, 0x44, 0x68, 0x82, 0x4c, 0xea, 0x3c,
	0x4d, 0x2c, 0x6d, 0x99, 0x68, 0x5b, 0x8e, 0x46, 0x80, 0x4b, 0xd2, 0x13, 0xf9, 0x03, 0xe8, 0x31,
	0x39, 0x37, 0x5a, 0x4a, 0xf3, 0xd2, 0x5f, 0x21, 0xc2, 0xaa, 0x95, 0xfe, 0xc5, 0x0a, 0xe7, 0x60,
	0x43, 0xbf, 0x35, 0x0f, 0x1b, 0x7a, 0x4f, 0xa1, 0xe3, 0x8e, 0xa2, 0xcc, 0xd4, 0x6f, 0x13, 0x06,
	0x78, 0x6f, 0x65, 0xa6, 0x35, 0x3b, 0x3f, 0xa9, 0x2c, 0x4c, 0x23, 0xe9, 0x43, 0xdd, 0xce, 0x0f,
	0x56, 0xe8, 0xed, 0x41, 0xb7, 0xdc, 0x4e, 0x18, 0xe9, 0x77, 0x08, 0xd4, 0x71, 0x9b, 0x09, 0x53,
	0x3f, 0x78, 0x98, 0x16, 0x89, 0xd1, 0x53, 0xbf, 0x5b, 0xb7, 0x74, 0x66, 0x85, 0xde, 0x21, 0x6c,
	0x5c, 0xab, 0xc9, 0x24, 0x30, 0x69, 0xd3, 0x9b, 0x1f, 0x59, 0x6f, 0xa2, 0xee, 0x2a, 0xad, 0x7b,
	0xf3, 0x73, 0x78, 0x5c, 0x11, 0xe6, 0xdd, 0xf9, 0x1b, 0xeb, 0x4e, 0xc7, 0x9b, 0x75, 0xe7, 0x33,
	0xe8, 0x3b, 0xb6, 0xf3, 0x67, 0xdf, 0x1e, 0xcb, 0x32, 0x9c, 0x3f, 0xe7, 0x70, 0x43, 0x7f, 0x6d,
	0x1e, 0x37, 0xf4, 0x76, 0xa1, 0x5b, 0x9e, 0x06, 0x3d, 0xfa, 0xc8, 0x7a, 0x94, 0xb7, 0x47, 0x8f,
	0xd6, 0x2c, 0x39, 0x97, 0x7a, 0x75, 0x4b, 0xce, 0xa5, 0xfb, 0xb0, 0x5a, 0xed, 0x88, 0x3e, 0x1d,
	0x5a, 0x9f, 0xba, 0xfd, 0xd0, 0xa7, 0x35, 0x5b, 0xce, 0xa9, 0x1b, 0x75, 0x5b, 0xce, 0xa9, 0x1f,
	0x81, 0xe7, 0x70, 0x6f, 0x85, 0x09, 0xb8, 0x76, 0x36, 0x6d, 0x01, 0x58, 0xe8, 0x5f, 0x85, 0xb9,
	0xb0, 0x45, 0x34, 0xa8, 0x22, 0x30, 0x49, 0x43, 0x31, 0x09, 0x8c, 0xb8, 0xc3, 0x02, 0xf8, 0x9c,
	0xe0, 0x6b, 0x16, 0xfe, 0x1d, 0x6a, 0xae, 0xc4, 0xdd, 0x79, 0xe4, 0xbd, 0x84, 0x4d, 0x2d, 0x63,
	0x65, 0xe6, 0x42, 0xb6, 0xe5, 0x2a, 0x26, 0x56, 0xa6, 0x19, 0xb3, 0x2f, 0xe1, 0x49, 0x8d, 0x32,
	0x1f, 0x34, 0x9f, 0x98, 0x7e, 0xc9, 0x9c, 0x8d, 0xda, 0x01, 0xac, 0x95, 0x7c, 0x17, 0xb6, 0x6d,
	0xe2, 0xf4, 0x98, 0xe3, 0xe2, 0x36, 0x8f, 0x1c, 0xfa, 0x3b, 0x3f, 0x83, 0x1c, 0xa2, 0xbf, 0xab,
	0x33, 0x61, 0xe8, 0x1e, 0x5b, 0x7f, 0xbb, 0x43, 0x60, 0xec, 0xea, 0xd6, 0x5c, 0xf0, 0x9e, 0x34,
	0xac, 0xb9, 0xe8, 0xbd, 0x0f, 0xbd, 0xda, 0xbe, 0x18, 0xbe, 0x5f, 0x12, 0xae, 0x5b, 0xee, 0x8a,
	0xf1, 0xab, 0xdb, 0x73, 0x01, 0x7c, 0xda, 0xb0, 0xe7, 0x22, 0xf8, 0x31, 0xac, 0x97, 0xc8, 0x5a,
	0x08, 0x77, 0x6d, 0x4c, 0x18, 0x5c, 0xc5, 0xf0, 0x45, 0x2d, 0x26, 0x8d, 0x20, 0xee, 0xd9, 0x32,
	0x62, 0x42, 0x2d, 0x8a, 0x87, 0xd8, 0xf6, 0x98, 0x81, 0x58, 0x77, 0x9c, 0xfd, 0x06, 0xe1, 0x4a,
	0xdc, 0xd5, 0x0a, 0x35, 0x1f, 0xab, 0x6c, 0x2e, 0xea, 0xbf, 0xe2, 0xb6, 0x37, 0x56, 0xd9, 0x5c,
	0xa1, 0x56, 0x84, 0xf9, 0x98, 0xbf, 0xcf, 0x7d, 0x8f, 0x79, 0x3f, 0x53, 0xa8, 0x8e, 0xed, 0x22,
	0xfe, 0x01, 0xf7, 0x0f, 0x62, 0xd4, 0x0a, 0xb5, 0x89, 0x1b, 0xfa, 0xcf, 0xe6, 0x71, 0x54, 0xa8,
	0xe5, 0x69, 0x30, 0xda, 0xcf, 0xb9, 0xf5, 0xd9, 0xed, 0xb9, 0x50, 0x1d, 0xc2, 0xc5, 0xfa, 0xa0,
	0x6e, 0xa9, 0x56, 0xa8, 0xd5, 0x8e, 0x18, 0xe9, 0x5f, 0x73, 0xf3, 0xe3, 0xfd, 0xb8, 0x50, 0xab,
	0x6f, 0xb7, 0x8e, 0xfd, 0xb0, 0x6e, 0xcb, 0x39, 0x75, 0x07, 0x5a, 0x61, 0xa1, 0xb5, 0x4c, 0xc2,
	0xa9, 0xbf, 0x4a, 0x80, 0x72, 0x8d, 0x3d, 0xf6, 0x56, 0xa7, 0x79, 0x1e, 0x88, 0x18, 0xd1, 0x7e,
	0x6f, 0x77, 0xe1, 0xa0, 0x3b, 0xea, 0x90, 0xec, 0x84, 0x44, 0xde, 0x2f, 0x00, 0x12, 0x69, 0x1c,
	0xe0, 0x63, 0x02, 0xb4, 0x13, 0x69, 0x2a, 0x35, 0x86, 0x96, 0xd5, 0x03, 0xab, 0x36, 0xe2, 0x8e,
	0xd5, 0xdb, 0xd0, 0x42, 0xb5, 0xc6, 0x6f, 0x38, 0x24, 0xe5, 0x8a, 0x11, 0x77, 0x23, 0x3c, 0xff,
	0x13, 0x68, 0x97, 0x17, 0x9f, 0xff, 0xd2, 0x12, 0x4b, 0x01, 0x5d, 0xbb, 0xd4, 0xc4, 0xfd, 0x75,
	0x52, 0xf1, 0xca, 0xdb, 0x80, 0xa5, 0x4c, 0x4c, 0xa5, 0xf4, 0x3f, 0x21, 0xb1, 0x5d, 0x78, 0x3e,
	0xac, 0x84, 0x69, 0x1c, 0xa3, 0xa5, 0x4f, 0xe9, 0x13, 0xdd, 0x92, 0xae, 0x88, 0xb1, 0xca, 0x32,
	0x95, 0xdc, 0x06, 0x46, 0xea, 0x38, 0xf7, 0x3f, 0xab, 0x9c, 0x84, 0xd2, 0x2b, 0x14, 0x7a, 0xcf,
	0xa1, 0xaf, 0xe5, 0x8f, 0x85, 0xcc, 0x8d, 0xd4, 0x81, 0x8c, 0x85, 0x9a, 0xf8, 0xbf, 0x75, 0x45,
	0xc3, 0xe2, 0x6f, 0x50, 0x8a, 0xf6, 0x2a, 0x20, 0x25, 0xd9, 0x91, 0xb5, 0x57, 0x4a, 0x29, 0xb5,
	0x9e, 0x43, 0x3f, 0x92, 0x13, 0xf5, 0x56, 0xea, 0xa9, 0xab, 0xab, 0xdf, 0x59, 0x7b, 0x4e, 0xcc,
	0x55, 0x75, 0x0c, 0x3b, 0xa1, 0x96, 0x91, 0x32, 0x41, 0x92, 0x1a, 0x59, 0x0e, 0x07, 0xcc, 0xf9,
	0xbd, 0x4d, 0x60, 0x8b, 0xb8, 0x48, 0x8d, 0xe4, 0x09, 0x81, 0xc9, 0x7f, 0x06, 0x56, 0x05, 0x37,
	0x69, 0x35, 0x87, 0x44, 0xe8, 0xec, 0xe3, 0xdd, 0x85, 0x83, 0xce, 0x70, 0x67, 0x60, 0xc7, 0xa0,
	0x81, 0x1b, 0x83, 0x06, 0x57, 0x6e, 0x0c, 0x1a, 0x6d, 0x58, 0xea, 0xb7, 0xa9, 0xae, 0xc6, 0x20,
	0xe9, 0x7d, 0x06, 0x2d, 0xe4, 0x07, 0x51, 0x21, 0xfd, 0xf7, 0xee, 0xb5, 0xb1, 0x82, 0xd8, 0x57,
	0x85, 0xf4, 0x8e, 0xa0, 0x4d, 0xb4, 0x4c, 0xa8, 0xc8, 0xff, 0xe2, 0x5e, 0x1e, 0xed, 0x71, 0x29,
	0x54, 0xe4, 0x7d, 0x01, 0x5d, 0x22, 0x16, 0x19, 0xfe, 0x44, 0xfe, 0x97, 0xf7, 0x72, 0x3b, 0x08,
	0x7c, 0x6d, 0xe1, 0x25, 0x3d, 0xd4, 0x92, 0xe8, 0x5f, 0xfd, 0x7f, 0xf4, 0x33, 0x0b, 0xf7, 0x8e,
	0xa1, 0x23, 0x8c, 0x11, 0xe1, 0x18, 0x73, 0x25, 0xf7, 0xbf, 0xde, 0x7d, 0x78, 0xd0, 0x19, 0x6e,
	0x0f, 0xdc, 0x4c, 0x79, 0xaa, 0x12, 0xa1, 0xa7, 0x27, 0x25, 0x62, 0x54, 0x47, 0x7b, 0x47, 0x00,
	0x13, 0x95, 0xc8, 0x40, 0x19, 0x19, 0xe7, 0xfe, 0x09, 0x71, 0xfd, 0x92, 0xcb, 0x4e, 0xfd, 0x4e,
	0x25, 0xf2, 0xdc, 0xc8, 0x78, 0xd4, 0x9e, 0xf0, 0xbf, 0xdc, 0xfb, 0x1a, 0xfa, 0x99, 0x98, 0xa2,
	0x91, 0x20, 0x92, 0x46, 0xa8, 0x49, 0xee, 0x9f, 0x12, 0x7b, 0xab, 0x64, 0x5f, 0x5a, 0xfd, 0x2b,
	0xab, 0x1e, 0xf5, 0xb2, 0xc6, 0xda, 0xfb, 0x14, 0xda, 0xd4, 0x7c, 0x69, 0xe7, 0xb3, 0x19, 0x2e,
	0xef, 0x8c, 0x3d, 0x18, 0x37, 0xc6, 0x02, 0xa4, 0x7d, 0xf7, 0xff, 0xbd, 0x00, 0xbd, 0xa6, 0x12,
	0x87, 0x35, 0x34, 0x12, 0x34, 0x46, 0x5f, 0x40, 0x51, 0x79, 0x73, 0xaf, 0x97, 0x03, 0x6b, 0x0d,
	0x68, 0x67, 0xe1, 0x47, 0xac, 0x3a, 0xaf, 0xf0, 0xcd, 0x7e, 0xf0, 0xf0, 0x5d, 0xfd, 0x60, 0xb1,
	0xd9, 0x0f, 0x58, 0x45, 0x4d, 0x71, 0xa9, 0x54, 0x9d, 0x61, 0x3b, 0x7c, 0x06, 0x7d, 0x54, 0x5d,
	0x8b, 0x5c, 0x3a, 0xcb, 0xcb, 0x84, 0x58, 0x35, 0xe2, 0xee, 0x54, 0xe4, 0xd2, 0x5a, 0xdf, 0xff,
	0xc7, 0x02, 0xac, 0xcd, 0xc6, 0xcc, 0xf3, 0x60, 0x91, 0xea, 0xd4, 0x7e, 0x1b, 0xfd, 0xf7, 0x1e,
	0x43, 0xfb, 0x46, 0x4d, 0x64, 0x60, 0xa6, 0x99, 0xe4, 0x6f, 0x69, 0xa1, 0xe0, 0x6a, 0x9a, 0x49,
	0x24, 0xe4, 0xea, 0x27, 0x49, 0x87, 0x5f, 0x1c, 0xd1, 0x7f, 0x94, 0x45, 0xc2, 0x08, 0x3e, 0x33,
	0xfd, 0xa7, 0xc6, 0x3a, 0x96, 0xe1, 0x9b, 0xbc, 0x88, 0xf9, 0xc0, 0xe5, 0x7a, 0xff, 0x9f, 0x4b,
	0xd0, 0x6b, 0xc6, 0xd0, 0xeb, 0xc1, 0x03, 0x15, 0xf1, 0x29, 0x1e, 0xa8, 0xc8, 0xfb, 0x0a, 0x56,
	0x29, 0x75, 0xe5, 0x9d, 0x0c, 0x0b, 0xcc, 0xdd, 0x07, 0xf7, 0xe6, 0x2e, 0xe5, 0xfa, 0x37, 0x8c,
	0xaf, 0x5a, 0xe1, 0xc3, 0x7a, 0x2b, 0x64, 0xa9, 0xe6, 0xa3, 0xda, 0x05, 0xb6, 0x53, 0x76, 0x9c,
	0x3d, 0x29, 0xaf, 0x1a, 0x97, 0xc3, 0xf2, 0xcc, 0xe5, 0x40, 0x0d, 0xfa, 0x46, 0xe2, 0x42, 0xf2,
	0x8b, 0xa0, 0x12, 0xa0, 0x0b, 0xaf, 0x45, 0xf2, 0xc6, 0xf6, 0x40, 0xfb, 0x10, 0x68, 0xa1, 0x80,
	0xda, 0xdf, 0x1e, 0x74, 0x49, 0x29, 0xa2, 0x48, 0xcb, 0x3c, 0xe7, 0x47, 0x40, 0x07, 0x65, 0x27,
	0x56, 0x54, 0x42, 0xdc, 0xdd, 0x05, 0x15, 0xc4, 0xdd, 0x5c, 0x03, 0x58, 0xb7, 0x56, 0x42, 0x02,
	0xb9, 0xdc, 0xeb, 0xf0, 0xd8, 0x8e, 0xc6, 0xac, 0x86, 0x73, 0x6f, 0x08, 0x9b, 0x0d, 0x7c, 0xf9,
	0x65, 0xf6, 0x55, 0xb0, 0x5e, 0x63, 0x9c, 0xb9, 0x8f, 0x3c, 0x02, 0xbf, 0xc1, 0x19, 0xa7, 0x93,
	0xc8, 0x75, 0x76, 0x7b, 0x5b, 0x6e, 0xd6, 0x68, 0x7f, 0x20, 0x2d, 0x7d, 0xe2, 0x36, 0xd0, 0xe7,
	0x06, 0x6f, 0xe4, 0x94, 0xae, 0xcd, 0xf6, 0x68, 0x05, 0xd7, 0x7f, 0x94, 0x34, 0xd2, 0x85, 0x7a,
	0x9a, 0xe1, 0xc5, 0x3c, 0x16, 0x2a, 0x09, 0x0a, 0xad, 0xf8, 0x05, 0xd0, 0xb3, 0xf2, 0x33, 0x14,
	0xbf, 0xd6, 0x0a, 0x4f, 0xcc, 0x48, 0xa3, 0x45, 0x92, 0x8b, 0xd0, 0xa8, 0x34, 0xc1, 0x99, 0xca,
	0x3e, 0x04, 0xd6, 0xad, 0xf2, 0xaa, 0xd2, 0x9d, 0x47, 0x58, 0xb2, 0xcc, 0xb9, 0xd1, 0x69, 0xec,
	0x5e, 0x03, 0x56, 0xf4, 0xad, 0x4e, 0x63, 0x8c, 0x8c, 0x33, 0x9a, 0xf2, 0x3b, 0xa0, 0xc5, 0x86,
	0xd2, 0xfd, 0x7f, 0x2d, 0x42, 0x7f, 0xa6, 0x35, 0xdd, 0xdf, 0x04, 0x76, 0xa1, 0x13, 0xc9, 0x3c,
	0xd4, 0x2a, 0xc3, 0x33, 0x70, 0xc1, 0xd4, 0x45, 0x38, 0x9b, 0xf2, 0x4b, 0x2c, 0x13, 0x1a, 0xef,
	0x32, 0x7e, 0x0a, 0xf3, 0x13, 0xee, 0x52, 0x68, 0x73, 0x91, 0x22, 0x2a, 0xd3, 0xd8, 0x4a, 0x32,
	0xa9, 0x83, 0x22, 0x51, 0x86, 0x93, 0xb4, 0x4b, 0xd2, 0x4b, 0xa9, 0x5f, 0x27, 0x8a, 0x72, 0xf2,
	0xc7, 0x42, 0x24, 0x06, 0x47, 0x28, 0xae, 0x2b, 0xb7, 0xc6, 0x4e, 0x80, 0xbc, 0x20, 0xbd, 0x09,
	0x62, 0x29, 0xf2, 0x42, 0xbb, 0xc7, 0xed, 0x2a, 0x8a, 0xbf, 0xbf, 0xf9, 0x93, 0x15, 0xba, 0xa9,
	0xe5, 0xef, 0x52, 0xdd, 0x8e, 0x0d, 0x25, 0xaf, 0x9d, 0x5a, 0xfe, 0x46, 0x82, 0x99, 0x2e, 0xd5,
	0x7a, 0x57, 0x97, 0x6a, 0xff, 0xef, 0x2e, 0x05, 0xcd, 0x2e, 0xb5, 0x07, 0x5d, 0x93, 0x1a, 0x31,
	0x71, 0x66, 0x3b, 0x76, 0x98, 0x22, 0x19, 0x1b, 0x1e, 0xc2, 0x66, 0x56, 0xe8, 0x70, 0x8c, 0x8d,
	0x2c, 0xd5, 0x94, 0x68, 0xd6, 0xe7, 0x9c, 0xa1, 0x4e, 0xf9, 0x3d, 0xea, 0xaa, 0x09, 0x61, 0x86,
	0x53, 0x0f, 0x96, 0xcd, 0xd1, 0xad, 0x06, 0xb1, 0xd6, 0x8e, 0x5f, 0xc0, 0x46, 0x35, 0x87, 0xe0,
	0x80, 0xc1, 0x34, 0x9b, 0xb1, 0x5e, 0x39, 0x8c, 0xa4, 0x86, 0x67, 0x8a, 0xd3, 0x03, 0xe8, 0x84,
	0x69, 0xec, 0x2e, 0x93, 0xd3, 0x2e, 0x27, 0xcb, 0x25, 0x76, 0xa3, 0xcb, 0x85, 0x1f, 0xda, 0xac,
	0xc8, 0xae, 0xaf, 0x97, 0xa9, 0x43, 0x7d, 0xf2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x9e,
	0x79, 0x92, 0x8b, 0x11, 0x00, 0x00,
}
